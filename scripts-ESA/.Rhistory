setwd("C:/Users/au583430/OneDrive - Aarhus universitet/Documents/GitHub/Pedersen-2023-sep-and-plasma-treat/scripts-ESA")
####################################################
rm(list = ls())
source('packages.R')
df <- read.csv('../data-ESA/ESAdata.csv')
View(df)
df <- read.csv('../data-ESA/ESAdata.csv', sep = ';')
# calculating means and sd
# Mean and sd of cumulative emission
dfsumm <- df[ , list(
ESA.mn = mean(ESA), ESA.sd = sd(ESA)
), by = list(exp, treat, time)]
# calculating means and sd
# Mean and sd of cumulative emission
dfsumm <- df[ , list(
ESA.mn = mean(ESA), ESA.sd = sd(ESA)
), by = list(exp, treat, time)]
# calculating means and sd
# Mean and sd of cumulative emission
dfsumm <- df[ , list(
ESA.mn = mean(ESA), ESA.sd = sd(ESA)
), by = list(exp)]
# calculating means and sd
# Mean and sd of cumulative emission
dfsumm <- df[ , list(
ESA.mn = mean(ESA), ESA.sd = sd(ESA)
), by = list(exp)]
# calculating means and sd
# Mean and sd of cumulative emission
dfsumm <- df[ , list( ,
ESA.mn = mean(ESA), ESA.sd = sd(ESA)
), by = list(exp)]
# calculating means and sd
# Mean and sd of cumulative emission
dfsumm <- df[ , list(
ESA.mn = mean(ESA), ESA.sd = sd(ESA)
)]
# calculating means and sd
# Mean and sd of cumulative emission
dfsumm <- df[ , list(
ESA.mn = mean(ESA), ESA.sd = sd(ESA)
)]
df$ESA
# calculating means and sd
dfsumm <- df[ , list(
ESA.mn = mean(ESA), ESA.sd = sd(ESA)
), by = exp]
# calculating means and sd
dfsumm <- df[ , list(
ESA.mn = mean(ESA), ESA.sd = sd(ESA)
), by = c(exp)]
source('functions.R')
source('load.R')
# calculating means and sd
dfsumm <- df[ , list(
ESA.mn = mean(ESA), ESA.sd = sd(ESA)
), by = c(exp)]
# calculating means and sd
dfsumm <- df[ , list(
ESA.mn = mean(ESA), ESA.sd = sd(ESA)
), by = (exp)]
# calculating means and sd
dfsumm <- df[ , list(
ESA.mn = mean(ESA), ESA.sd = sd(ESA),
), by = (exp)]
# calculating means and sd
dfsumm <- df[ , list(
ESA.mn = mean(ESA), ESA.sd = sd(ESA)
), by = (exp)]
# calculating means and sd
dfsumm <- df[ , list(
ESA.mn = mean(ESA), ESA.sd = sd(ESA)
), by = list(exp)]
# calculating means and sd
dfsumm <- df[ , . (
ESA.mn = mean(ESA), ESA.sd = sd(ESA)
), by = list(exp)]
# calculating means and sd
dfsumm <- df[ , . (
ESA.mn = mean(ESA), ESA.sd = sd(ESA)
), by = list(exp)]
df <- as.data.table(df)
??as.data.table
library(data.table)
df <- as.data.table(df)
View(df)
dfsumm <- df[ , . (
ESA.mn = mean(ESA), ESA.sd = sd(ESA)
), by = list(exp)]
View(dfsumm)
dfsumm <- df[ , . (
ESA.mn = mean(ESA), ESA.sd = sd(ESA)
), by = list(exp, treat, time)]
View(dfsumm)
# ESA over time
ggplot(df, aes(time, ESA.mn, color = treat, fill = treat)) +
geom_point(size = 0.5) + geom_line(aes(group = treat)) +
facet_wrap( ~ exp, ncol = 2, scales = 'free_y') +
geom_ribbon(aes (ymax = ESA.mn + ESA.sd, ymin = ESA.mn - ESA.sd, group = treat), alpha = 0.3, color = NA) +
theme_bw() +
ylab('Exposed surface area (%)') + xlab('Time from application (h)') +
theme(legend.title = element_blank()) +
theme(legend.position = 'bottom') +
scale_color_brewer(palette = 'Set1') +
scale_fill_brewer(palette = 'Set1')
# ESA over time
ggplot(dfsumm, aes(time, ESA.mn, color = treat, fill = treat)) +
geom_point(size = 0.5) + geom_line(aes(group = treat)) +
facet_wrap( ~ exp, ncol = 2, scales = 'free_y') +
geom_ribbon(aes (ymax = ESA.mn + ESA.sd, ymin = ESA.mn - ESA.sd, group = treat), alpha = 0.3, color = NA) +
theme_bw() +
ylab('Exposed surface area (%)') + xlab('Time from application (h)') +
theme(legend.title = element_blank()) +
theme(legend.position = 'bottom') +
scale_color_brewer(palette = 'Set1') +
scale_fill_brewer(palette = 'Set1')
ggsave2x('../plots/ESA01', height = 4, width = 7)
source('../functions/ggsave2x.R')
ggsave2x('../plots/ESA01', height = 4, width = 7)
####################################################
rm(list = ls())
source('packages.R')
source('functions.R')
source('load.R')
source('summary.R')
source('plot.R')
dfsumm$treat <- gsub('22H', 'Digestate A')
####################################################
rm(list = ls())
source('packages.R')
source('functions.R')
source('load.R')
source('summary.R')
dfsumm$treat <- gsub('22H', 'Digestate A')
?gsub
dfsumm$treat <- gsub('22H', 'Digestate A', dfsumm$treat)
View(dfsumm)
dfsumm$treat <- gsub('22I', 'Digestate A', dfsumm$treat)
df <- read.csv('../data-ESA/ESAdata.csv', sep = ';')
df$treat <- gsub('22I', 'Digestate A', df$treat)
View(df)
df$treat <- gsub(df$treat, '22I', 'Digestate A')
df <- read.csv('../data-ESA/ESAdata.csv', sep = ';')
df$exp <- gsub(df$exp, '22I', 'Digestate A')
df <- read.csv('../data-ESA/ESAdata.csv', sep = ';')
df$exp <- sub(df$exp, '22H', 'Digestate A')
df$exp[df$exp == '22H', ] <- sub(df$exp[df$exp == '22H', ], '22H', 'Digestate A')
df <- read.csv('../data-ESA/ESAdata.csv', sep = ';')
df$exp[df$exp == '22H', ] <- sub(df$exp[df$exp == '22H', ], '22H', 'Digestate A')
df <- read.csv('../data-ESA/ESAdata.csv', sep = ';')
df$exp <- sub('22H', 'Digestate A', df$exp)
df$exp <- sub('22I', 'Pig A', df$exp)
df$exp <- sub('22J', 'Digestate B', df$exp)
df$exp <- sub('22K', 'Pig B', df$exp)
####################################################
rm(list = ls())
source('packages.R')
source('functions.R')
source('load.R')
source('summary.R')
source('plot.R')
setwd("C:/Users/au583430/OneDrive - Aarhus universitet/Documents/GitHub/Pedersen-2023-sep-and-plasma-treat/scripts-ESA")
rm(list = ls())
source('packages.R')
source('functions.R')
source('load.R')
source('summary.R')
dfsumm$treat <- sub('NEO', 'LP', dfsumm$treat)
dfsumm$treat <- sub('Raw', 'UN', dfsumm$treat)
dfsumm$treat <- sub('Separated', 'LF', dfsumm$treat)
# ESA over time
ggplot(dfsumm, aes(time, ESA.mn, color = treat, fill = treat)) +
geom_point(size = 0.5) + geom_line(aes(group = treat)) +
facet_wrap( ~ exp, ncol = 2, scales = 'free_y') +
geom_ribbon(aes (ymax = ESA.mn + ESA.sd, ymin = ESA.mn - ESA.sd, group = treat), alpha = 0.3, color = NA) +
theme_bw() +
ylab('Exposed surface area (%)') + xlab('Time from application (h)') +
theme(legend.title = element_blank()) +
theme(legend.position = 'bottom') +
scale_color_brewer(palette = 'Set1') +
scale_fill_brewer(palette = 'Set1')
rm(list = ls())
source('packages.R')
source('functions.R')
source('load.R')
source('summary.R')
dfsumm$treat <- sub('NEO', 'Treated fraction', dfsumm$treat)
dfsumm$treat <- sub('Raw', 'Raw slurry', dfsumm$treat)
dfsumm$treat <- sub('Separated', 'Liquid fraction', dfsumm$treat)
# ESA over time
ggplot(dfsumm, aes(time, ESA.mn, color = treat, fill = treat)) +
geom_point(size = 0.5) + geom_line(aes(group = treat)) +
facet_wrap( ~ exp, ncol = 2, scales = 'free_y') +
geom_ribbon(aes (ymax = ESA.mn + ESA.sd, ymin = ESA.mn - ESA.sd, group = treat), alpha = 0.3, color = NA) +
theme_bw() +
ylab('Exposed surface area (%)') + xlab('Time from application (h)') +
theme(legend.title = element_blank()) +
theme(legend.position = 'bottom') +
scale_color_brewer(palette = 'Set1') +
scale_fill_brewer(palette = 'Set1')
ggsave2x('../plots/ESA01', height = 4, width = 7)
setwd("C:/Users/au583430/OneDrive - Aarhus universitet/Documents/GitHub/Pedersen-2023-sep-and-plasma-treat/scripts-NH3")
####################################################
rm(list = ls())
source('packages.R')
source('functions.R')
source('load.R')
source('combine.R')
source('calc.R')
source('export.R')
dn3$treat <- sub('NEO', 'LP', dn3$treat)
dn3$treat <- sub('Raw', 'UN', dn3$treat)
dn3$treat <- sub('Separated', 'LF', dn3$treat)
ggplot(dn3, aes(elapsed.time, flux.mn.perc, color = treat, fill = treat)) +
geom_point(size = 0.5) + geom_line(aes(group = treat)) +
facet_wrap( ~ exp, ncol = 2, scales = 'free_y') +
geom_ribbon(aes (ymax = flux.mn.perc + flux.sd.perc, ymin = flux.mn.perc - flux.sd.perc, group = treat), alpha = 0.3, color = NA) +
theme_bw() +
ylab(expression(paste('Flux (% applied TAN  ', h^-1, ' ', m^-2, ')'))) + xlab('Time from application (h)') +
theme(legend.title = element_blank()) +
theme(legend.position = 'bottom') +
xlim(0, 160) +
scale_color_brewer(palette = 'Set1') +
scale_fill_brewer(palette = 'Set1') +
xlim(0, 50)
####################################################
rm(list = ls())
source('packages.R')
source('functions.R')
source('load.R')
source('combine.R')
source('calc.R')
source('export.R')
dn3$treat <- sub('NEO', 'Treated slurry', dn3$treat)
dn3$treat <- sub('Raw', 'Raw slurry', dn3$treat)
dn3$treat <- sub('Separated', 'Liquid fraction', dn3$treat)
ggplot(dn3, aes(elapsed.time, flux.mn.perc, color = treat, fill = treat)) +
geom_point(size = 0.5) + geom_line(aes(group = treat)) +
facet_wrap( ~ exp, ncol = 2, scales = 'free_y') +
geom_ribbon(aes (ymax = flux.mn.perc + flux.sd.perc, ymin = flux.mn.perc - flux.sd.perc, group = treat), alpha = 0.3, color = NA) +
theme_bw() +
ylab(expression(paste('Flux (% applied TAN  ', h^-1, ' ', m^-2, ')'))) + xlab('Time from application (h)') +
theme(legend.title = element_blank()) +
theme(legend.position = 'bottom') +
xlim(0, 160) +
scale_color_brewer(palette = 'Set1') +
scale_fill_brewer(palette = 'Set1') +
xlim(0, 50)
ggsave2x('../plots/flux02', height = 4, width = 7)
####################################################
rm(list = ls())
source('packages.R')
source('functions.R')
source('load.R')
source('combine.R')
source('calc.R')
source('export.R')
dn3$treat <- sub('NEO', 'LP', dn3$treat)
dn3$treat <- sub('Raw', 'UN', dn3$treat)
dn3$treat <- sub('Separated', 'LF', dn3$treat)
ggplot(dn3, aes(elapsed.time, flux.mn.perc, color = treat, fill = treat)) +
geom_point(size = 0.5) + geom_line(aes(group = treat)) +
facet_wrap( ~ exp, ncol = 2, scales = 'free_y') +
geom_ribbon(aes (ymax = flux.mn.perc + flux.sd.perc, ymin = flux.mn.perc - flux.sd.perc, group = treat), alpha = 0.3, color = NA) +
theme_bw() +
ylab(expression(paste('Flux (% applied TAN  ', h^-1, ' ', m^-2, ')'))) + xlab('Time from application (h)') +
theme(legend.title = element_blank()) +
theme(legend.position = 'bottom') +
xlim(0, 160) +
scale_color_brewer(palette = 'Set1') +
scale_fill_brewer(palette = 'Set1') +
xlim(0, 50)
ggsave2x('../plots/flux02', height = 4, width = 7)
setwd("C:/Users/au583430/OneDrive - Aarhus universitet/Documents/GitHub/Pedersen-2023-sep-and-plasma-treat/scripts-ESA")
rm(list = ls())
source('packages.R')
source('functions.R')
source('load.R')
source('summary.R')
source('plot.R')
