#### ORDERING AND CROPING DATA #########################################################
########################################################################################
dat$id <- dat$MPVPosition
# taking the last point of each measurent from each valve
dat <- filter(dat, !(dat$id == lead(dat$id)))
# Selecting points with whole numbers (when the valve change there is a measurement where the valve position
# is in between two valves, these are removed)
dat <- dat[dat$id == '1' | dat$id == '2' | dat$id == '3' | dat$id == '4' | dat$id == '5' | dat$id == '6' | dat$id == '7' |
dat$id == '8' | dat$id == '9' | dat$id == '10' | dat$id == '11' | dat$id == '12' | dat$id == '13', ]
# Making elapsed.time fit with the first measurement of each valve = 0
dat$Vid <- 0
dat$Vid[1:13] <- c('V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10', 'V11', 'V12', 'V13')
splitdat <- split(dat, f = dat$id)
new.names <- dat$Vid[1:13]
for (i in 1:13){
assign(new.names[i], splitdat[[i]])
}
z = list(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13)
new.dat = NULL
for(i in z){
i$elapsed.time <- difftime(i$date.time, min(i$date.time), units='hour')
new.dat <- rbind(new.dat,i)
}
# cropping data:
dat <- new.dat[,c(19, 26:27, 29)]
dat$elapsed.time <- signif(dat$elapsed.time, digits = 3)
# adding a column with treatment names
dat$treat <- dat$id
dat$treat <- mapvalues(dat$treat, from = c('4', '6', '9'), to = c(rep('Raw', 3)))
dat$treat <- mapvalues(dat$treat, from = c('1', '5', '10'), to = c(rep('Separated', 3)))
dat$treat <- mapvalues(dat$treat, from = c('2', '8', '12'), to = c(rep('NEO', 3)))
dat$treat <- mapvalues(dat$treat, from = c('3'), to = c('bg tunnel 2'));
dat$treat <- mapvalues(dat$treat, from = c('7'), to = c('bg tunnel 5'))
dat$treat <- mapvalues(dat$treat, from = c('11'), to = c('bg tunnel 8'));
# background data:
dat.bg <- dat[dat$treat == 'bg tunnel 2' | dat$treat == 'bg tunnel 5'| dat$treat == 'bg tunnel 8', ]
# outlet data
dat <- dat[dat$treat == 'Raw' | dat$treat == 'Separated'| dat$treat == 'NEO', ]
########################################################################################
#### TREATMENT OF BACKGROUNDS ##########################################################
########################################################################################
# plotting all background datapoints (NH3 [ppb] vs time [h])
ggplot(dat.bg, aes(elapsed.time, NH3_30s, colour = treat)) + geom_point()
# As the backgrounds are very similar an average of the background tube for tunnel 2, 5 and 8 is used as the back
# ground value.
# Picking out the data
dat.bg <- dat.bg[dat.bg$treat == 'bg tunnel 2' | dat.bg$treat == 'bg tunnel 5'| dat.bg$treat == 'bg tunnel 8', ]
# calculating the average and sd
dat.bg.summ <- ddply(dat.bg, c('elapsed.time'), summarise, NH3.bg.mn = mean(NH3_30s), NH3.bg.sd = sd(NH3_30s))
# joining the datasets:
dat <- full_join(dat.bg.summ, dat, by = 'elapsed.time')
# Subtracting the background values from the 30 second average values
dat$NH3.corr <- dat$NH3_30s - dat$NH3.bg.mn
dat[!complete.cases(dat),]
dat <- na.omit(dat) # removing one NA point
########################################################################################
#### FLUX CALCULATIONS #################################################################
# ########################################################################################
# reading in temperature data
header <- c('date', 'time', 'temp')
weather <- read.table('C:/Users/au583430/OneDrive - Aarhus universitet/Documents/MAG/N2 applied experiments/data/temperature.txt', fill = TRUE, col.names = header)
weather <- weather[-1, ]
weather$date.time.weather <- paste(weather$date, weather$time)
# round date.time in data to fit with weather
dat$date.time.weather <- round_date(dat$date.time, '1 hour')
dat$date.time.weather <- as.character(format(dat$date.time.weather, format='%d-%m-%Y %H:%M:%S'))
dat <- left_join(dat, weather, by = 'date.time.weather')
# constants:
p.con <- 1 # atm
R.con <- 0.082057338 # [L * atm * K^-1 * mol^-1]
A.frame <- 0.293 * 0.674 #m^2
M.N <- 14 # g * mol^-1
air.flow <- 20.16 * 60 # L min^-1
dat$temp <- as.numeric(dat$temp)
dat$air.temp.K <- dat$temp + 273.15
weather.22I <- dat[, c(1, 12)]
weather.22I$experiment <- '22I'
# calculation of a concentration from ppb to mol * L^-1
dat$n <- p.con / (R.con * dat$air.temp.K) * dat$NH3.corr * 10^-9  # mol * L^-1
# calculation of flux, from mol * L^-1 to gN * min^-1 * m^-2
dat$flux <- (dat$n * M.N * air.flow) / A.frame
# rearanging data by tunnel
dat <- arrange(dat, by = id)
# calculation of total flux over time
# Average ammonia flux in measurement interval
dat$flux.tr <- rollapplyr(dat$flux, 2, mean, fill = NA)
dat$flux.tr[dat$elapsed.time == 0] <- 0
dat$flux.tr[dat$flux.tr < 0 ] <- 0
# calculation of total flux over time, last point * 104 min  (time from start to start 8 x 10 min)
dat$flux.time <- dat$flux.tr * 104
###### CUMULATIVE EMISSION
# cum.emis is calculated for the boxplots
dat <- mutate(group_by(dat, id, treat), cum = cumsum(flux.time))
###### FLUX
# Table for plotting flux
dat.summ <- summarise(group_by(dat, treat, elapsed.time), flux.mn = mean(flux), flux.sd = sd(flux),
cum.mn = mean(cum), cum.sd = sd(cum))
dat.end <- dat.summ[dat.summ$elapsed.time == 161, ]
dat.fluxtime <- dat[dat$id == '2', c(1:2)]
dat.summ <- left_join(dat.summ, dat.fluxtime, by = 'elapsed.time')
# g <- ggplot(dat.end, aes(treat, cum.mn, fill = treat)) + geom_bar(stat = 'identity', width = 0.5) +
#   geom_errorbar(aes(ymin = cum.mn - cum.sd, ymax = cum.mn + cum.sd), width = 0.3, size = 0.5) +
#   ylab(expression(paste('Cumulative  ', N, ' (g ',' ', m^-2, ')')))
# print(g)
dat.summ <- na.omit(dat.summ)
# g <- ggplot(dat.summ, aes(elapsed.time, flux.mn, colour = treat, fill = treat)) + geom_point()  + geom_line() +
#   geom_ribbon(aes (ymax = flux.mn + flux.sd, ymin = flux.mn - flux.sd, group = treat), alpha = 0.3, color = NA) +
#   ylab(expression(paste(N, ' flux (g N  ', min^-1, ' ', m^-2, ')'))) +
#   xlab('Time after slurry application [hours]')
# print(g)
# # DATA FRAMES
dat.22I <- dat[dat$elapsed.time == 161, ] # for statistics
dat.22I.end <- dat.end # cum emis
dat.22I.summ <- dat.summ # flux
g <- ggplot(dat.end, aes(treat, cum.mn, fill = treat)) + geom_bar(stat = 'identity', width = 0.5) +
geom_errorbar(aes(ymin = cum.mn - cum.sd, ymax = cum.mn + cum.sd), width = 0.3, size = 0.5) +
ylab(expression(paste('Cumulative  ', N, ' (g ',' ', m^-2, ')')))
print(g)
g <- ggplot(dat.summ, aes(elapsed.time, flux.mn, colour = treat, fill = treat)) + geom_point()  + geom_line() +
geom_ribbon(aes (ymax = flux.mn + flux.sd, ymin = flux.mn - flux.sd, group = treat), alpha = 0.3, color = NA) +
ylab(expression(paste(N, ' flux (g N  ', min^-1, ' ', m^-2, ')'))) +
xlab('Time after slurry application [hours]')
print(g)
########################################################################################
#### READING IN AND ORDERING DATA ######################################################
########################################################################################
# reading in data, ordering and adding elapse.time
org1 <- read.table('C:/Users/au583430/OneDrive - Aarhus universitet/Documents/MAG/N2 applied experiments/data/NH3/data/NH3_22J_1.txt', header = TRUE, fill = TRUE)
org2 <- read.table('C:/Users/au583430/OneDrive - Aarhus universitet/Documents/MAG/N2 applied experiments/data/NH3/data/NH3_22J_2.txt', header = TRUE, fill = TRUE)
org3 <- read.table('C:/Users/au583430/OneDrive - Aarhus universitet/Documents/MAG/N2 applied experiments/data/NH3/data/NH3_22J_3.txt', header = TRUE, fill = TRUE)
org4 <- read.table('C:/Users/au583430/OneDrive - Aarhus universitet/Documents/MAG/N2 applied experiments/data/NH3/data/NH3_22J_4.txt', header = TRUE, fill = TRUE)
org5 <- read.table('C:/Users/au583430/OneDrive - Aarhus universitet/Documents/MAG/N2 applied experiments/data/NH3/data/NH3_22J_5.txt', header = TRUE, fill = TRUE)
org6 <- read.table('C:/Users/au583430/OneDrive - Aarhus universitet/Documents/MAG/N2 applied experiments/data/NH3/data/NH3_22J_6.txt', header = TRUE, fill = TRUE)
org7 <- read.table('C:/Users/au583430/OneDrive - Aarhus universitet/Documents/MAG/N2 applied experiments/data/NH3/data/NH3_22J_7.txt', header = TRUE, fill = TRUE)
org8 <- read.table('C:/Users/au583430/OneDrive - Aarhus universitet/Documents/MAG/N2 applied experiments/data/NH3/data/NH3_22J_8.txt', header = TRUE, fill = TRUE)
# datafiles has been 'reversed'
data <- rbind(org1, org2, org3, org4, org5, org6, org7, org8)
data$date.time <- paste(data$DATE, data$TIME)
data$date.time<-ymd_hms(data$date.time)
data$date.time <- data$date.time
dat <- data
dat <- dat[-c(0:50), ]
########################################################################################
#### ORDERING AND CROPING DATA #########################################################
########################################################################################
dat$id <- dat$MPVPosition
# taking the last point of each measurent from each valve
dat <- filter(dat, !(dat$id == lead(dat$id)))
# Selecting points with whole numbers (when the valve change there is a measurement where the valve position
# is in between two valves, these are removed)
dat <- dat[dat$id == '1' | dat$id == '2' | dat$id == '3' | dat$id == '4' | dat$id == '5' | dat$id == '6' | dat$id == '7' |
dat$id == '8' | dat$id == '9' | dat$id == '10' | dat$id == '11' | dat$id == '12' | dat$id == '13', ]
# Making elapsed.time fit with the first measurement of each valve = 0
dat$Vid <- 0
dat$Vid[1:13] <- c('V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10', 'V11', 'V12', 'V13')
splitdat <- split(dat, f = dat$id)
new.names <- dat$Vid[1:13]
for (i in 1:13){
assign(new.names[i], splitdat[[i]])
}
z = list(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13)
new.dat = NULL
for(i in z){
i$elapsed.time <- difftime(i$date.time, min(i$date.time), units='hour')
new.dat <- rbind(new.dat,i)
}
# cropping data:
dat <- new.dat[,c(19, 26:27, 29)]
dat$elapsed.time <- signif(dat$elapsed.time, digits = 3)
# adding a column with treatment names
dat$treat <- dat$id
dat$treat <- mapvalues(dat$treat, from = c('2', '5', '9'), to = c(rep('Raw', 3)))
dat$treat <- mapvalues(dat$treat, from = c('4', '6', '10'), to = c(rep('Separated', 3)))
dat$treat <- mapvalues(dat$treat, from = c('1', '8', '12'), to = c(rep('NEO', 3)))
dat$treat <- mapvalues(dat$treat, from = c('3'), to = c('bg tunnel 2'));
dat$treat <- mapvalues(dat$treat, from = c('7'), to = c('bg tunnel 5'))
dat$treat <- mapvalues(dat$treat, from = c('11'), to = c('bg tunnel 8'));
# # Fixing a time-bug:
dat$elapsed.time[dat$elapsed.time == '3.46'] <- 3.47
# # removing times were we are missing data:
dat <- dat[! dat$elapsed.time == '44.2', ]; dat <- dat[! dat$elapsed.time == '68.8', ]; dat <- dat[! dat$elapsed.time == '89.8', ];
dat <- dat[! dat$elapsed.time == '29.4', ]; dat <- dat[! dat$elapsed.time == '34.6', ];
# background data:
dat.bg <- dat[dat$treat == 'bg tunnel 2' | dat$treat == 'bg tunnel 5'| dat$treat == 'bg tunnel 8', ]
# outlet data
dat <- dat[dat$treat == 'Raw' | dat$treat == 'Separated'| dat$treat == 'NEO', ]
########################################################################################
#### TREATMENT OF BACKGROUNDS ##########################################################
########################################################################################
# plotting all background datapoints (NH3 [ppb] vs time [h])
ggplot(dat.bg, aes(elapsed.time, NH3_30s, colour = treat)) + geom_point()
# As the backgrounds are very similar an average of the background tube for tunnel 2, 5 and 8 is used as the back
# ground value.
# Picking out the data
dat.bg <- dat.bg[dat.bg$treat == 'bg tunnel 2' | dat.bg$treat == 'bg tunnel 5'| dat.bg$treat == 'bg tunnel 8', ]
# calculating the average and sd
dat.bg.summ <- ddply(dat.bg, c('elapsed.time'), summarise, NH3.bg.mn = mean(NH3_30s), NH3.bg.sd = sd(NH3_30s))
# joining the datasets:
dat <- full_join(dat.bg.summ, dat, by = 'elapsed.time')
# Subtracting the background values from the 30 second average values
dat$NH3.corr <- dat$NH3_30s - dat$NH3.bg.mn
dat[!complete.cases(dat),]
########################################################################################
#### FLUX CALCULATIONS #################################################################
# ########################################################################################
# reading in temperature data
header <- c('date', 'time', 'temp')
weather <- read.table('C:/Users/au583430/OneDrive - Aarhus universitet/Documents/MAG/N2 applied experiments/data/temperature.txt', fill = TRUE, col.names = header)
weather <- weather[-1, ]
weather$date.time.weather <- paste(weather$date, weather$time)
# round date.time in data to fit with weather
dat$date.time.weather <- round_date(dat$date.time, '1 hour')
dat$date.time.weather <- as.character(format(dat$date.time.weather, format='%d-%m-%Y %H:%M:%S'))
dat <- left_join(dat, weather, by = 'date.time.weather')
# constants:
p.con <- 1 # atm
R.con <- 0.082057338 # [L * atm * K^-1 * mol^-1]
A.frame <- 0.293 * 0.674 #m^2
M.N <- 14 # g * mol^-1
air.flow <- 20.16 * 60 # L min^-1
dat$temp <- as.numeric(dat$temp)
dat$air.temp.K <- dat$temp + 273.15
weather.22J <- dat[, c(1, 12)]
weather.22J$experiment <- '22J'
# calculation of a concentration from ppb to mol * L^-1
dat$n <- p.con / (R.con * dat$air.temp.K) * dat$NH3.corr * 10^-9  # mol * L^-1
# calculation of flux, from mol * L^-1 to gN * min^-1 * m^-2
dat$flux <- (dat$n * M.N * air.flow) / A.frame
# rearanging data by tunnel
dat <- arrange(dat, by = id)
# calculation of total flux over time
# Average ammonia flux in measurement interval
dat$flux.tr <- rollapplyr(dat$flux, 2, mean, fill = NA)
dat$flux.tr[dat$elapsed.time == 0] <- 0
dat$flux.tr[dat$flux.tr < 0 ] <- 0
# calculation of total flux over time, last point * 104 min (time from start to start 8 x 10 min)
dat$flux.time <- dat$flux.tr * 104
###### CUMULATIVE EMISSION
# cum.emis is calculated for the boxplots
dat <- mutate(group_by(dat, id, treat), cum = cumsum(flux.time))
###### FLUX
# Table for plotting flux
dat.summ <- summarise(group_by(dat, treat, elapsed.time), flux.mn = mean(flux), flux.sd = sd(flux),
cum.mn = mean(cum), cum.sd = sd(cum))
dat.end <- dat.summ[dat.summ$elapsed.time == 161, ]
dat.fluxtime <- dat[dat$id == '2', c(1:2)]
dat.summ <- left_join(dat.summ, dat.fluxtime, by = 'elapsed.time')
# g <- ggplot(dat.end, aes(treat, cum.mn, fill = treat)) + geom_bar(stat = 'identity', width = 0.5) +
#   geom_errorbar(aes(ymin = cum.mn - cum.sd, ymax = cum.mn + cum.sd), width = 0.3, size = 0.5) +
#   ylab(expression(paste('Cumulative  ', N, ' (g ',' ', m^-2, ')')))
# print(g)
dat.summ <- na.omit(dat.summ)
# g <- ggplot(dat.summ, aes(elapsed.time, flux.mn, colour = treat, fill = treat)) + geom_point()  + geom_line() +
#   geom_ribbon(aes (ymax = flux.mn + flux.sd, ymin = flux.mn - flux.sd, group = treat), alpha = 0.3, color = NA) +
#   ylab(expression(paste(N, ' flux (g N  ', min^-1, ' ', m^-2, ')'))) +
#   xlab('Time after slurry application [hours]')
# print(g)
# # DATA FRAMES
dat.22J <- dat[dat$elapsed.time == 161, ] # for statistics
dat.22J.end <- dat.end # cum emis
dat.22J.summ <- dat.summ # flux
g <- ggplot(dat.end, aes(treat, cum.mn, fill = treat)) + geom_bar(stat = 'identity', width = 0.5) +
geom_errorbar(aes(ymin = cum.mn - cum.sd, ymax = cum.mn + cum.sd), width = 0.3, size = 0.5) +
ylab(expression(paste('Cumulative  ', N, ' (g ',' ', m^-2, ')')))
print(g)
g <- ggplot(dat.summ, aes(elapsed.time, flux.mn, colour = treat, fill = treat)) + geom_point()  + geom_line() +
geom_ribbon(aes (ymax = flux.mn + flux.sd, ymin = flux.mn - flux.sd, group = treat), alpha = 0.3, color = NA) +
ylab(expression(paste(N, ' flux (g N  ', min^-1, ' ', m^-2, ')'))) +
xlab('Time after slurry application [hours]')
print(g)
########################################################################################
#### READING IN AND ORDERING DATA ######################################################
########################################################################################
# reading in data, ordering and adding elapse.time
org1 <- read.table('C:/Users/au583430/OneDrive - Aarhus universitet/Documents/MAG/N2 applied experiments/data/NH3/data/NH3_22K_1.txt', header = TRUE, fill = TRUE)
org2 <- read.table('C:/Users/au583430/OneDrive - Aarhus universitet/Documents/MAG/N2 applied experiments/data/NH3/data/NH3_22K_2.txt', header = TRUE, fill = TRUE)
org3 <- read.table('C:/Users/au583430/OneDrive - Aarhus universitet/Documents/MAG/N2 applied experiments/data/NH3/data/NH3_22K_3.txt', header = TRUE, fill = TRUE)
org4 <- read.table('C:/Users/au583430/OneDrive - Aarhus universitet/Documents/MAG/N2 applied experiments/data/NH3/data/NH3_22K_4.txt', header = TRUE, fill = TRUE)
org5 <- read.table('C:/Users/au583430/OneDrive - Aarhus universitet/Documents/MAG/N2 applied experiments/data/NH3/data/NH3_22K_5.txt', header = TRUE, fill = TRUE)
org6 <- read.table('C:/Users/au583430/OneDrive - Aarhus universitet/Documents/MAG/N2 applied experiments/data/NH3/data/NH3_22K_6.txt', header = TRUE, fill = TRUE)
org7 <- read.table('C:/Users/au583430/OneDrive - Aarhus universitet/Documents/MAG/N2 applied experiments/data/NH3/data/NH3_22K_7.txt', header = TRUE, fill = TRUE)
org8 <- read.table('C:/Users/au583430/OneDrive - Aarhus universitet/Documents/MAG/N2 applied experiments/data/NH3/data/NH3_22K_8.txt', header = TRUE, fill = TRUE)
org9 <- read.table('C:/Users/au583430/OneDrive - Aarhus universitet/Documents/MAG/N2 applied experiments/data/NH3/data/NH3_22K_9.txt', header = TRUE, fill = TRUE)
org10 <- read.table('C:/Users/au583430/OneDrive - Aarhus universitet/Documents/MAG/N2 applied experiments/data/NH3/data/NH3_22K_10.txt', header = TRUE, fill = TRUE)
# datafiles has been 'reversed'
data <- rbind(org1, org2, org3, org4, org5, org6, org7, org8, org9, org10)
data$date.time <- paste(data$DATE, data$TIME)
data$date.time<-ymd_hms(data$date.time)
data$date.time <- data$date.time
dat <- data
dat <- dat[-c(0:3474), ]
########################################################################################
#### ORDERING AND CROPING DATA #########################################################
########################################################################################
dat$id <- dat$MPVPosition
# taking the last point of each measurent from each valve
dat <- filter(dat, !(dat$id == lead(dat$id)))
# Selecting points with whole numbers (when the valve change there is a measurement where the valve position
# is in between two valves, these are removed)
dat <- dat[dat$id == '1' | dat$id == '2' | dat$id == '3' | dat$id == '4' | dat$id == '5' | dat$id == '6' | dat$id == '7' |
dat$id == '8' | dat$id == '9' | dat$id == '10' | dat$id == '11' | dat$id == '12' | dat$id == '13', ]
# Making elapsed.time fit with the first measurement of each valve = 0
dat$Vid <- 0
dat$Vid[1:13] <- c('V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10', 'V11', 'V12', 'V13')
splitdat <- split(dat, f = dat$id)
new.names <- dat$Vid[1:13]
for (i in 1:13){
assign(new.names[i], splitdat[[i]])
}
z = list(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13)
new.dat = NULL
for(i in z){
i$elapsed.time <- difftime(i$date.time, min(i$date.time), units='hour')
new.dat <- rbind(new.dat,i)
}
# cropping data:
dat <- new.dat[,c(19, 26:27, 29)]
dat$elapsed.time <- signif(dat$elapsed.time, digits = 3)
# adding a column with treatment names
dat$treat <- dat$id
dat$treat <- mapvalues(dat$treat, from = c('2', '6', '9'), to = c(rep('Raw', 3)))
dat$treat <- mapvalues(dat$treat, from = c('4', '8', '12'), to = c(rep('Separated', 3)))
dat$treat <- mapvalues(dat$treat, from = c('1', '5', '10'), to = c(rep('NEO', 3)))
dat$treat <- mapvalues(dat$treat, from = c('3'), to = c('bg tunnel 2'));
dat$treat <- mapvalues(dat$treat, from = c('7'), to = c('bg tunnel 5'))
dat$treat <- mapvalues(dat$treat, from = c('11'), to = c('bg tunnel 8'));
# # Fixing a time-bug:
dat$elapsed.time[dat$elapsed.time == '3.46'] <- 3.47; dat$elapsed.time[dat$elapsed.time == '46.8'] <- 46.7;
dat <- dat[! dat$elapsed.time == 2.13, ]; dat <- dat[! dat$elapsed.time == 52.30, ]; dat <- dat[! dat$elapsed.time == 118, ];
# background data:
dat.bg <- dat[dat$treat == 'bg tunnel 2' | dat$treat == 'bg tunnel 5'| dat$treat == 'bg tunnel 8', ]
# outlet data
dat <- dat[dat$treat == 'Raw' | dat$treat == 'Separated'| dat$treat == 'NEO', ]
########################################################################################
#### TREATMENT OF BACKGROUNDS ##########################################################
########################################################################################
# plotting all background datapoints (NH3 [ppb] vs time [h])
ggplot(dat.bg, aes(elapsed.time, NH3_30s, colour = treat)) + geom_point()
# As the backgrounds are very similar an average of the background tube for tunnel 2, 5 and 8 is used as the back
# ground value.
# Picking out the data
dat.bg <- dat.bg[dat.bg$treat == 'bg tunnel 2' | dat.bg$treat == 'bg tunnel 5'| dat.bg$treat == 'bg tunnel 8', ]
# calculating the average and sd
dat.bg.summ <- ddply(dat.bg, c('elapsed.time'), summarise, NH3.bg.mn = mean(NH3_30s), NH3.bg.sd = sd(NH3_30s))
# joining the datasets:
dat <- full_join(dat.bg.summ, dat, by = 'elapsed.time')
# Subtracting the background values from the 30 second average values
dat$NH3.corr <- dat$NH3_30s - dat$NH3.bg.mn
dat[!complete.cases(dat),]
########################################################################################
#### FLUX CALCULATIONS #################################################################
# ########################################################################################
# reading in temperature data
header <- c('date', 'time', 'temp')
weather <- read.table('C:/Users/au583430/OneDrive - Aarhus universitet/Documents/MAG/N2 applied experiments/data/temperature.txt', fill = TRUE, col.names = header)
weather <- weather[-1, ]
weather$date.time.weather <- paste(weather$date, weather$time)
# round date.time in data to fit with weather
dat$date.time.weather <- round_date(dat$date.time, '1 hour')
dat$date.time.weather <- as.character(format(dat$date.time.weather, format='%d-%m-%Y %H:%M:%S'))
dat <- left_join(dat, weather, by = 'date.time.weather')
# constants:
p.con <- 1 # atm
R.con <- 0.082057338 # [L * atm * K^-1 * mol^-1]
A.frame <- 0.293 * 0.674 #m^2
M.N <- 14 # g * mol^-1
air.flow <- 20.16 * 60 # L min^-1
dat$temp <- as.numeric(dat$temp)
dat$air.temp.K <- dat$temp + 273.15
weather.22K <- dat[, c(1, 12)]
weather.22K$experiment <- '22K'
# calculation of a concentration from ppb to mol * L^-1
dat$n <- p.con / (R.con * dat$air.temp.K) * dat$NH3.corr * 10^-9  # mol * L^-1
# calculation of flux, from mol * L^-1 to gN * min^-1 * m^-2
dat$flux <- (dat$n * M.N * air.flow) / A.frame
# rearanging data by tunnel
dat <- arrange(dat, by = id)
# calculation of total flux over time
# Average ammonia flux in measurement interval
dat$flux.tr <- rollapplyr(dat$flux, 2, mean, fill = NA)
dat$flux.tr[dat$elapsed.time == 0] <- 0
dat$flux.tr[dat$flux.tr < 0 ] <- 0
# calculation of total flux over time, last point * 104 min (time from start to start 8 x 10 min)
dat$flux.time <- dat$flux.tr * 104
###### CUMULATIVE EMISSION
# cum.emis is calculated for the boxplots
dat <- mutate(group_by(dat, id, treat), cum = cumsum(flux.time))
###### FLUX
# Table for plotting flux
dat.summ <- summarise(group_by(dat, treat, elapsed.time), flux.mn = mean(flux), flux.sd = sd(flux),
cum.mn = mean(cum), cum.sd = sd(cum))
dat.end <- dat.summ[dat.summ$elapsed.time == 161, ]
dat.fluxtime <- dat[dat$id == '2', c(1:2)]
dat.summ <- left_join(dat.summ, dat.fluxtime, by = 'elapsed.time')
g <- ggplot(dat.end, aes(treat, cum.mn, fill = treat)) + geom_bar(stat = 'identity', width = 0.5) +
geom_errorbar(aes(ymin = cum.mn - cum.sd, ymax = cum.mn + cum.sd), width = 0.3, size = 0.5) +
ylab(expression(paste('Cumulative  ', N, ' (g ',' ', m^-2, ')')))
print(g)
dat.summ <- na.omit(dat.summ)
# g <- ggplot(dat.summ, aes(elapsed.time, flux.mn, colour = treat, fill = treat)) + geom_point()  + geom_line() +
#   geom_ribbon(aes (ymax = flux.mn + flux.sd, ymin = flux.mn - flux.sd, group = treat), alpha = 0.3, color = NA) +
#   ylab(expression(paste(N, ' flux (g N  ', min^-1, ' ', m^-2, ')'))) +
#   xlab('Time after slurry application [hours]')
# print(g)
# # DATA FRAMES
dat.22K <- dat[dat$elapsed.time == 159, ] # for statistics
dat.22K.end <- dat.end # cum emis
dat.22K.summ <- dat.summ # flux
write.csv(dat.22H, '..data/digA.A.csv')
write.csv(dat.22H, '../data/digA.A.csv')
# data frames for GitHub use
write.csv(dat.22H, '../data/digA.A.csv')
write.csv(dat.22H.end, '../data/digA.B.csv')
write.csv(dat.22H.summ, '../data/digA.C.csv')
# data frames for GitHub use
write.csv(dat.22I, '../data/pigA.A.csv')
write.csv(dat.22I.end, '../data/pigA.B.csv')
write.csv(dat.22I.summ, '../data/pigA.C.csv')
# data frames for GitHub use
write.csv(dat.22J, '../data/digA.B.csv')
write.csv(dat.22J.end, '../data/digB.B.csv')
write.csv(dat.22J.summ, '../data/digB.C.csv')
# data frames for GitHub use
write.csv(dat.22K, '../data/pigB.A.csv')
write.csv(dat.22K.end, '../data/pigB.B.csv')
write.csv(dat.22K.summ, '../data/pigB.C.csv')
# data frames for GitHub use
write.csv(dat.22J, '../data/digB.B.csv')
write.csv(dat.22J.end, '../data/digB.B.csv')
write.csv(dat.22J.summ, '../data/digB.C.csv')
# data frames for GitHub use
write.csv(dat.22H, '../data/digA.A.csv')
write.csv(dat.22H.end, '../data/digA.B.csv')
write.csv(dat.22H.summ, '../data/digA.C.csv')
# data frames for GitHub use
write.csv(dat.22J, '../data/digB.A.csv')
write.csv(dat.22J.end, '../data/digB.B.csv')
write.csv(dat.22J.summ, '../data/digB.C.csv')
digA.A <- fread('../data-NH3/digA.A.csv')
digA.A <- read('../data-NH3/digA.A.csv')
digA.A <- read.csv('../data-NH3/digA.A.csv')
####################################################
rm(list = ls())
setwd("C:/Users/au583430/OneDrive - Aarhus universitet/Documents/GitHub/Pedersen-2023-sep-and-plasma-treat/scripts-NH3")
digA.A <- read.csv('../data-NH3/digA.A.csv')
digA.A <- read.csv('../data-NH3/digA.A.csv')
digA.B <- read.csv('../data-NH3/digA.B.csv')
digA.C <- read.csv('../data-NH3/digA.C.csv')
digB.A <- read.csv('../data-NH3/digB.A.csv')
digB.B <- read.csv('../data-NH3/digB.B.csv')
digB.C <- read.csv('../data-NH3/digB.C.csv')
pigA.A <- read.csv('../data-NH3/pigA.A.csv')
pigA.B <- read.csv('../data-NH3/pigA.B.csv')
pigA.C <- read.csv('../data-NH3/pigA.C.csv')
pigB.A <- read.csv('../data-NH3/pigB.A.csv')
pigB.B <- read.csv('../data-NH3/pigB.B.csv')
pigB.C <- read.csv('../data-NH3/pigB.C.csv')
digA.A <- read.csv('../data-NH3/digA.A.csv')
digA.A$exp <- 'Digestate A'
digA.B <- read.csv('../data-NH3/digA.B.csv')
digA.B$exp <- 'Digestate A'
digA.C <- read.csv('../data-NH3/digA.C.csv')
digA.C$exp <- 'Digestate A'
digB.A <- read.csv('../data-NH3/digB.A.csv')
digB.A$exp <- 'Digestate B'
digB.B <- read.csv('../data-NH3/digB.B.csv')
digB.B$exp <- 'Digestate B'
digB.C <- read.csv('../data-NH3/digB.C.csv')
digB.C$exp <- 'Digestate B'
pigA.A <- read.csv('../data-NH3/pigA.A.csv')
pigA.A$exp <- 'Pig A'
pigA.B <- read.csv('../data-NH3/pigA.B.csv')
pigA.B$exp <- 'Pig A'
pigA.C <- read.csv('../data-NH3/pigA.C.csv')
pigA.C$exp <- 'Pig A'
pigB.A <- read.csv('../data-NH3/pigB.A.csv')
pigB.A$exp <- 'Pig B'
pigB.B <- read.csv('../data-NH3/pigB.B.csv')
pigB.B$exp <- 'Pig B'
pigB.C <- read.csv('../data-NH3/pigB.C.csv')
pigB.C$exp <- 'Pig B'
dn1 <- rbind()
dn1 <- rbind(digA.A, digB.A, pigA.A, pigB.A)
dn2 <- rbind(digA.B, digB.B, pigA.B, pigB.B)
dn3 <- rbind(digA.C, digB.C, pigA.C, pigB.C)
# slurry data
ds <- read.txt('../data/slurry.summ.txt')
# slurry data
ds <- read.table('../data/slurry.summ.txt')
View(ds)
digA.A$exp
ds$exp <- ds$experiment
ds$exp <- mapvalues(from = '22H', from = 'Digestate A')
ds$exp <- mapvalues(from = '22H', to = 'Digestate A')
ds$exp <- ds$experiment
ds$exp <- mapvalues(ds$exp, from = '22H', to = 'Digestate A')
# slurry data
ds <- read.table('../data/slurry.summ.txt')
ds$exp <- ds$experiment
ds$exp <- mapvalues(ds$exp, from = '22H', to = 'Digestate A')
ds$exp <- mapvalues(ds$exp, from = '22J', to = 'Digestate B')
ds$exp <- mapvalues(ds$exp, from = '22I', to = 'Pig A')
ds$exp <- mapvalues(ds$exp, from = '22K', to = 'Pig B')
dn1 <- full_join(dn1, ds, by = 'exp')
dn1 <- rbind(digA.A, digB.A, pigA.A, pigB.A)
dn1 <- full_join(dn1, ds, by = 'exp')
dn2 <- rbind(digA.B, digB.B, pigA.B, pigB.B)
dn2 <- full_join(dn2, ds, by = 'exp')
dn3 <- rbind(digA.C, digB.C, pigA.C, pigB.C)
dn3 <- full_join(dn3, ds, by = 'exp')
dn1 <- rbind(digA.A, digB.A, pigA.A, pigB.A)
dn1 <- full_join(dn1, ds, by = 'exp')
