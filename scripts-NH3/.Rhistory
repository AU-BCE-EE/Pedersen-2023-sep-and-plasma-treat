dat <- ddply(dat, c('id'), filter, row_number() <= n()-1)
dat$measuring.tech <- 'Wind tunnel'
dat$details <- ''
dat$detection.limit <- ''
dat$bg.value <- dat$NH3.bg.mn / 1000
dat$bg.unit <- 'ppm'
# from gN * min^-1 * m^-2 to gN * h^-1 * ha^-1
dat$NH3.value <- dat$flux *10^-3 * 60 * 10^4
dat$NH3.unit <- 'kg N/ha-hr'
dat$man.pH <- ''
dat$air.temp <- dat$temp
dat$air.height <- '2'
#### CHANGE THESE ##########################################
dat.table <- dat[, c(18:37)]
write.xlsx(dat.table, file = '../ALFAM2 submission/dat22I.xlsx')
write.xlsx(dat.table, file = '../ALFAM2 submission/dat22I.xlsx')
rm(list = ls())
dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source('packages.R')
########################################################################################
#### READING IN AND ORDERING DATA ######################################################
########################################################################################
# Look into two high points from sep
# Find missing data
# reading in data, ordering and adding elapse.time
org1 <- read.table('C:/Users/au583430/OneDrive - Aarhus universitet/Documents/MAG/N2 applied experiments/data/NH3/data/NH3_22I_1.txt', header = TRUE, fill = TRUE)
org2 <- read.table('C:/Users/au583430/OneDrive - Aarhus universitet/Documents/MAG/N2 applied experiments/data/NH3/data/NH3_22I_2.txt', header = TRUE, fill = TRUE)
org3 <- read.table('C:/Users/au583430/OneDrive - Aarhus universitet/Documents/MAG/N2 applied experiments/data/NH3/data/NH3_22I_3.txt', header = TRUE, fill = TRUE)
org4 <- read.table('C:/Users/au583430/OneDrive - Aarhus universitet/Documents/MAG/N2 applied experiments/data/NH3/data/NH3_22I_4.txt', header = TRUE, fill = TRUE)
org5 <- read.table('C:/Users/au583430/OneDrive - Aarhus universitet/Documents/MAG/N2 applied experiments/data/NH3/data/NH3_22I_5.txt', header = TRUE, fill = TRUE)
org6 <- read.table('C:/Users/au583430/OneDrive - Aarhus universitet/Documents/MAG/N2 applied experiments/data/NH3/data/NH3_22I_6.txt', header = TRUE, fill = TRUE)
org7 <- read.table('C:/Users/au583430/OneDrive - Aarhus universitet/Documents/MAG/N2 applied experiments/data/NH3/data/NH3_22I_7.txt', header = TRUE, fill = TRUE)
# datafiles has been 'reversed'
data <- rbind(org1, org2, org3, org4, org5, org6, org7)
data$date.time <- paste(data$DATE, data$TIME)
data$date.time<-ymd_hms(data$date.time)
data$date.time <- data$date.time
dat <- data
########################################################################################
#### ORDERING AND CROPING DATA #########################################################
########################################################################################
dat$id <- dat$MPVPosition
# taking the last point of each measurent from each valve
dat <- filter(dat, !(dat$id == lead(dat$id)))
# Selecting points with whole numbers (when the valve change there is a measurement where the valve position
# is in between two valves, these are removed)
dat <- dat[dat$id == '1' | dat$id == '2' | dat$id == '3' | dat$id == '4' | dat$id == '5' | dat$id == '6' | dat$id == '7' |
dat$id == '8' | dat$id == '9' | dat$id == '10' | dat$id == '11' | dat$id == '12' | dat$id == '13', ]
# Making elapsed.time fit with the first measurement of each valve = 0
dat$Vid <- 0
dat$Vid[1:13] <- c('V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10', 'V11', 'V12', 'V13')
splitdat <- split(dat, f = dat$id)
new.names <- dat$Vid[1:13]
for (i in 1:13){
assign(new.names[i], splitdat[[i]])
}
z = list(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13)
new.dat = NULL
for(i in z){
i$elapsed.time <- difftime(i$date.time, min(i$date.time), units='hour')
new.dat <- rbind(new.dat,i)
}
# cropping data:
dat <- new.dat[,c(19, 26:27, 29)]
dat$elapsed.time <- signif(dat$elapsed.time, digits = 3)
# adding a column with treatment names
dat$treat <- dat$id
dat$treat <- mapvalues(dat$treat, from = c('4', '6', '9'), to = c(rep('Reference', 3)))
dat$treat <- mapvalues(dat$treat, from = c('1', '5', '10'), to = c(rep('Separated', 3)))
dat$treat <- mapvalues(dat$treat, from = c('2', '8', '12'), to = c(rep('Plasma', 3)))
dat$replicate <- dat$id
dat$replicate <- mapvalues(dat$replicate, from = c('1', '2', '4'), to = c(rep('1', 3)))
dat$replicate <- mapvalues(dat$replicate, from = c('6', '5', '8'), to = c(rep('2', 3)))
dat$replicate <- mapvalues(dat$replicate, from = c('9', '10', '12'), to = c(rep('3', 3)))
dat$treat <- mapvalues(dat$treat, from = c('3'), to = c('bg tunnel 2'));
dat$treat <- mapvalues(dat$treat, from = c('7'), to = c('bg tunnel 5'))
dat$treat <- mapvalues(dat$treat, from = c('11'), to = c('bg tunnel 8'));
# background data:
dat.bg <- dat[dat$treat == 'bg tunnel 2' | dat$treat == 'bg tunnel 5'| dat$treat == 'bg tunnel 8', ]
# outlet data
dat <- dat[dat$treat == 'Reference' | dat$treat == 'Separated'| dat$treat == 'Plasma', ]
########################################################################################
#### TREATMENT OF BACKGROUNDS ##########################################################
########################################################################################
# plotting all background datapoints (NH3 [ppb] vs time [h])
ggplot(dat.bg, aes(elapsed.time, NH3_30s, colour = treat)) + geom_point()
# As the backgrounds are very similar an average of the background tube for tunnel 2, 5 and 8 is used as the back
# ground value.
# Picking out the data
dat.bg <- dat.bg[dat.bg$treat == 'bg tunnel 2' | dat.bg$treat == 'bg tunnel 5'| dat.bg$treat == 'bg tunnel 8', ]
# calculating the average and sd
dat.bg.summ <- ddply(dat.bg, c('elapsed.time'), summarise, NH3.bg.mn = mean(NH3_30s), NH3.bg.sd = sd(NH3_30s))
# joining the datasets:
dat <- full_join(dat.bg.summ, dat, by = 'elapsed.time')
# Subtracting the background values from the 30 second average values
dat$NH3.corr <- dat$NH3_30s - dat$NH3.bg.mn
dat[!complete.cases(dat),]
dat <- na.omit(dat) # removing one NA point
########################################################################################
#### FLUX CALCULATIONS #################################################################
# ########################################################################################
# reading in temperature data
header <- c('date', 'time', 'temp')
weather <- read.table('C:/Users/au583430/OneDrive - Aarhus universitet/Documents/MAG/N2 applied experiments/data/temperature.txt', fill = TRUE, col.names = header)
weather <- weather[-1, ]
weather$date.time.weather <- paste(weather$date, weather$time)
# round date.time in data to fit with weather
dat$date.time.weather <- round_date(dat$date.time, '1 hour')
dat$date.time.weather <- as.character(format(dat$date.time.weather, format='%d-%m-%Y %H:%M:%S'))
dat <- left_join(dat, weather, by = 'date.time.weather')
# constants:
p.con <- 1 # atm
R.con <- 0.082057338 # [L * atm * K^-1 * mol^-1]
A.frame <- 0.293 * 0.674 #m^2
M.N <- 14 # g * mol^-1
air.flow <- 20.16 * 60 # L min^-1
dat$temp <- as.numeric(dat$temp)
dat$air.temp.K <- dat$temp + 273.15
weather.22I <- dat[, c(1, 12)]
weather.22I$experiment <- '22I'
write.csv(weather.22I, '../data/w22I.csv')
# calculation of a concentration from ppb to mol * L^-1
dat$n <- p.con / (R.con * dat$air.temp.K) * dat$NH3.corr * 10^-9  # mol * L^-1
# calculation of flux, from mol * L^-1 to gN * min^-1 * m^-2
dat$flux <- (dat$n * M.N * air.flow) / A.frame
# rearanging data by tunnel
dat <- arrange(dat, by = id)
# calculation of total flux over time
# Average ammonia flux in measurement interval
dat$flux.tr <- rollapplyr(dat$flux, 2, mean, fill = NA)
dat <- dat[! dat$flux.tr == 0, ]
ggplot(dat, aes(elapsed.time, flux.tr, color = treat)) + geom_point()
############# MAKING DATA FRAME FOR ALFAM2 TEMPLATE
dat$project <- 'MAG'             # CHANGE CHANGE CHANGE
dat$exp <- '22I'                # CHANGE CHANGE CHANGE
dat$field <- 'A'       # CHANGE CHANGE CHANGE
dat$plot.number <- dat$id
dat$treatment <- dat$treat
dat$replicate.nu <- dat$replicate
# rearanging data by tunnel
dat <- arrange(dat, by = id)
dat$id <- as.character(dat$id)
dat <- mutate(group_by(dat, id), numbering = row_number())
dat$start.date <- format(dat$date.time, format="%d-%m-%Y %H:%M")
dat$end.date <- dat$start.date
dat$end.date <- c(dat$end.date[-1], dat$end.date[nrow(dat)]) # obs, the last row of each shift must be corrected manually after
dat$start.date <- as.POSIXct(dat$start.date, format="%d-%m-%Y %H:%M")
dat$end.date <- as.POSIXct(dat$end.date, format="%d-%m-%Y %H:%M")
dat$shift.length <- as.numeric((as.POSIXct(dat$end.date) - as.POSIXct(dat$start.date) )) / (60 * 60)
dat$shift.length <- as.numeric(dat$shift.length)
dat$shift.length <- dat$shift.length
dat <- ddply(dat, c('id'), filter, row_number() <= n()-1)
dat$measuring.tech <- 'Wind tunnel'
dat$details <- ''
dat$detection.limit <- ''
dat$bg.value <- dat$NH3.bg.mn / 1000
dat$bg.unit <- 'ppm'
# from gN * min^-1 * m^-2 to gN * h^-1 * ha^-1
dat$NH3.value <- dat$flux *10^-3 * 60 * 10^4
dat$NH3.unit <- 'kg N/ha-hr'
dat$man.pH <- ''
dat$air.temp <- dat$temp
dat$air.height <- '2'
#### CHANGE THESE ##########################################
dat.table <- dat[, c(18:37)]
write.xlsx(dat.table, file = '../ALFAM2 submission/dat22I.xlsx')
########################################################################################
#### READING IN AND ORDERING DATA ######################################################
########################################################################################
# reading in data, ordering and adding elapse.time
org1 <- read.table('C:/Users/au583430/OneDrive - Aarhus universitet/Documents/MAG/N2 applied experiments/data/NH3/data/NH3_22J_1.txt', header = TRUE, fill = TRUE)
org2 <- read.table('C:/Users/au583430/OneDrive - Aarhus universitet/Documents/MAG/N2 applied experiments/data/NH3/data/NH3_22J_2.txt', header = TRUE, fill = TRUE)
org3 <- read.table('C:/Users/au583430/OneDrive - Aarhus universitet/Documents/MAG/N2 applied experiments/data/NH3/data/NH3_22J_3.txt', header = TRUE, fill = TRUE)
org4 <- read.table('C:/Users/au583430/OneDrive - Aarhus universitet/Documents/MAG/N2 applied experiments/data/NH3/data/NH3_22J_4.txt', header = TRUE, fill = TRUE)
org5 <- read.table('C:/Users/au583430/OneDrive - Aarhus universitet/Documents/MAG/N2 applied experiments/data/NH3/data/NH3_22J_5.txt', header = TRUE, fill = TRUE)
org6 <- read.table('C:/Users/au583430/OneDrive - Aarhus universitet/Documents/MAG/N2 applied experiments/data/NH3/data/NH3_22J_6.txt', header = TRUE, fill = TRUE)
org7 <- read.table('C:/Users/au583430/OneDrive - Aarhus universitet/Documents/MAG/N2 applied experiments/data/NH3/data/NH3_22J_7.txt', header = TRUE, fill = TRUE)
org8 <- read.table('C:/Users/au583430/OneDrive - Aarhus universitet/Documents/MAG/N2 applied experiments/data/NH3/data/NH3_22J_8.txt', header = TRUE, fill = TRUE)
# datafiles has been 'reversed'
data <- rbind(org1, org2, org3, org4, org5, org6, org7, org8)
data$date.time <- paste(data$DATE, data$TIME)
data$date.time<-ymd_hms(data$date.time)
data$date.time <- data$date.time
dat <- data
dat <- dat[-c(0:50), ]
########################################################################################
#### ORDERING AND CROPING DATA #########################################################
########################################################################################
dat$id <- dat$MPVPosition
# taking the last point of each measurent from each valve
dat <- filter(dat, !(dat$id == lead(dat$id)))
# Selecting points with whole numbers (when the valve change there is a measurement where the valve position
# is in between two valves, these are removed)
dat <- dat[dat$id == '1' | dat$id == '2' | dat$id == '3' | dat$id == '4' | dat$id == '5' | dat$id == '6' | dat$id == '7' |
dat$id == '8' | dat$id == '9' | dat$id == '10' | dat$id == '11' | dat$id == '12' | dat$id == '13', ]
# Making elapsed.time fit with the first measurement of each valve = 0
dat$Vid <- 0
dat$Vid[1:13] <- c('V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10', 'V11', 'V12', 'V13')
splitdat <- split(dat, f = dat$id)
new.names <- dat$Vid[1:13]
for (i in 1:13){
assign(new.names[i], splitdat[[i]])
}
z = list(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13)
new.dat = NULL
for(i in z){
i$elapsed.time <- difftime(i$date.time, min(i$date.time), units='hour')
new.dat <- rbind(new.dat,i)
}
# cropping data:
dat <- new.dat[,c(19, 26:27, 29)]
dat$elapsed.time <- signif(dat$elapsed.time, digits = 3)
# adding a column with treatment names
dat$treat <- dat$id
dat$treat <- mapvalues(dat$treat, from = c('2', '5', '9'), to = c(rep('Reference', 3)))
dat$treat <- mapvalues(dat$treat, from = c('4', '6', '10'), to = c(rep('Separated', 3)))
dat$treat <- mapvalues(dat$treat, from = c('1', '8', '12'), to = c(rep('Plasma', 3)))
dat$replicate <- dat$id
dat$replicate <- mapvalues(dat$replicate, from = c('1', '2', '4'), to = c(rep('1', 3)))
dat$replicate <- mapvalues(dat$replicate, from = c('6', '5', '8'), to = c(rep('2', 3)))
dat$replicate <- mapvalues(dat$replicate, from = c('9', '10', '12'), to = c(rep('3', 3)))
dat$treat <- mapvalues(dat$treat, from = c('3'), to = c('bg tunnel 2'));
dat$treat <- mapvalues(dat$treat, from = c('7'), to = c('bg tunnel 5'))
dat$treat <- mapvalues(dat$treat, from = c('11'), to = c('bg tunnel 8'));
# # Fixing a time-bug:
dat$elapsed.time[dat$elapsed.time == '3.46'] <- 3.47
# # removing times were we are missing data:
dat <- dat[! dat$elapsed.time == '44.2', ]; dat <- dat[! dat$elapsed.time == '68.8', ]; dat <- dat[! dat$elapsed.time == '89.8', ];
dat <- dat[! dat$elapsed.time == '29.4', ]; dat <- dat[! dat$elapsed.time == '34.6', ];
# background data:
dat.bg <- dat[dat$treat == 'bg tunnel 2' | dat$treat == 'bg tunnel 5'| dat$treat == 'bg tunnel 8', ]
# outlet data
dat <- dat[dat$treat == 'Reference' | dat$treat == 'Separated'| dat$treat == 'Plasma', ]
########################################################################################
#### TREATMENT OF BACKGROUNDS ##########################################################
########################################################################################
# plotting all background datapoints (NH3 [ppb] vs time [h])
ggplot(dat.bg, aes(elapsed.time, NH3_30s, colour = treat)) + geom_point()
# As the backgrounds are very similar an average of the background tube for tunnel 2, 5 and 8 is used as the back
# ground value.
# Picking out the data
dat.bg <- dat.bg[dat.bg$treat == 'bg tunnel 2' | dat.bg$treat == 'bg tunnel 5'| dat.bg$treat == 'bg tunnel 8', ]
# calculating the average and sd
dat.bg.summ <- ddply(dat.bg, c('elapsed.time'), summarise, NH3.bg.mn = mean(NH3_30s), NH3.bg.sd = sd(NH3_30s))
# joining the datasets:
dat <- full_join(dat.bg.summ, dat, by = 'elapsed.time')
# Subtracting the background values from the 30 second average values
dat$NH3.corr <- dat$NH3_30s - dat$NH3.bg.mn
dat[!complete.cases(dat),]
########################################################################################
#### FLUX CALCULATIONS #################################################################
# ########################################################################################
# reading in temperature data
header <- c('date', 'time', 'temp')
weather <- read.table('C:/Users/au583430/OneDrive - Aarhus universitet/Documents/MAG/N2 applied experiments/data/temperature.txt', fill = TRUE, col.names = header)
weather <- weather[-1, ]
weather$date.time.weather <- paste(weather$date, weather$time)
# round date.time in data to fit with weather
dat$date.time.weather <- round_date(dat$date.time, '1 hour')
dat$date.time.weather <- as.character(format(dat$date.time.weather, format='%d-%m-%Y %H:%M:%S'))
dat <- left_join(dat, weather, by = 'date.time.weather')
# constants:
p.con <- 1 # atm
R.con <- 0.082057338 # [L * atm * K^-1 * mol^-1]
A.frame <- 0.293 * 0.674 #m^2
M.N <- 14 # g * mol^-1
air.flow <- 20.16 * 60 # L min^-1
dat$temp <- as.numeric(dat$temp)
dat$air.temp.K <- dat$temp + 273.15
weather.22J <- dat[, c(1, 12)]
weather.22J$experiment <- '22J'
write.csv(weather.22J, '../data/w22J.csv')
# calculation of a concentration from ppb to mol * L^-1
dat$n <- p.con / (R.con * dat$air.temp.K) * dat$NH3.corr * 10^-9  # mol * L^-1
# calculation of flux, from mol * L^-1 to gN * min^-1 * m^-2
dat$flux <- (dat$n * M.N * air.flow) / A.frame
# rearanging data by tunnel
dat <- arrange(dat, by = id)
# calculation of total flux over time
# Average ammonia flux in measurement interval
dat$flux.tr <- rollapplyr(dat$flux, 2, mean, fill = NA)
dat$flux.tr[dat$elapsed.time == 0] <- 0
ggplot(dat, aes(elapsed.time, flux.tr, color = treat)) + geom_point()
############# MAKING DATA FRAME FOR ALFAM2 TEMPLATE
dat$project <- 'MAG'             # CHANGE CHANGE CHANGE
dat$exp <- '22J'                # CHANGE CHANGE CHANGE
dat$field <- 'A'       # CHANGE CHANGE CHANGE
dat$plot.number <- dat$id
dat$treatment <- dat$treat
dat$replicate.nu <- dat$replicate
# rearanging data by tunnel
dat <- arrange(dat, by = id)
dat$id <- as.character(dat$id)
dat <- mutate(group_by(dat, id), numbering = row_number())
dat$start.date <- format(dat$date.time, format="%d-%m-%Y %H:%M")
dat$end.date <- dat$start.date
dat$end.date <- c(dat$end.date[-1], dat$end.date[nrow(dat)]) # obs, the last row of each shift must be corrected manually after
dat$start.date <- as.POSIXct(dat$start.date, format="%d-%m-%Y %H:%M")
dat$end.date <- as.POSIXct(dat$end.date, format="%d-%m-%Y %H:%M")
dat$shift.length <- as.numeric((as.POSIXct(dat$end.date) - as.POSIXct(dat$start.date) )) / (60 * 60)
dat$shift.length <- as.numeric(dat$shift.length)
dat$shift.length <- dat$shift.length
dat <- ddply(dat, c('id'), filter, row_number() <= n()-1)
dat$measuring.tech <- 'Wind tunnel'
dat$details <- ''
dat$detection.limit <- ''
dat$bg.value <- dat$NH3.bg.mn / 1000
dat$bg.unit <- 'ppm'
# from gN * min^-1 * m^-2 to gN * h^-1 * ha^-1
dat$NH3.value <- dat$flux *10^-3 * 60 * 10^4
dat$NH3.unit <- 'kg N/ha-hr'
dat$man.pH <- ''
dat$air.temp <- dat$temp
dat$air.height <- '2'
#### CHANGE THESE ##########################################
dat.table <- dat[, c(18:37)]
write.xlsx(dat.table, file = '../ALFAM2 submission/dat22J.xlsx')
########################################################################################
#### READING IN AND ORDERING DATA ######################################################
########################################################################################
# reading in data, ordering and adding elapse.time
org1 <- read.table('C:/Users/au583430/OneDrive - Aarhus universitet/Documents/MAG/N2 applied experiments/data/NH3/data/NH3_22K_1.txt', header = TRUE, fill = TRUE)
org2 <- read.table('C:/Users/au583430/OneDrive - Aarhus universitet/Documents/MAG/N2 applied experiments/data/NH3/data/NH3_22K_2.txt', header = TRUE, fill = TRUE)
org3 <- read.table('C:/Users/au583430/OneDrive - Aarhus universitet/Documents/MAG/N2 applied experiments/data/NH3/data/NH3_22K_3.txt', header = TRUE, fill = TRUE)
org4 <- read.table('C:/Users/au583430/OneDrive - Aarhus universitet/Documents/MAG/N2 applied experiments/data/NH3/data/NH3_22K_4.txt', header = TRUE, fill = TRUE)
org5 <- read.table('C:/Users/au583430/OneDrive - Aarhus universitet/Documents/MAG/N2 applied experiments/data/NH3/data/NH3_22K_5.txt', header = TRUE, fill = TRUE)
org6 <- read.table('C:/Users/au583430/OneDrive - Aarhus universitet/Documents/MAG/N2 applied experiments/data/NH3/data/NH3_22K_6.txt', header = TRUE, fill = TRUE)
org7 <- read.table('C:/Users/au583430/OneDrive - Aarhus universitet/Documents/MAG/N2 applied experiments/data/NH3/data/NH3_22K_7.txt', header = TRUE, fill = TRUE)
org8 <- read.table('C:/Users/au583430/OneDrive - Aarhus universitet/Documents/MAG/N2 applied experiments/data/NH3/data/NH3_22K_8.txt', header = TRUE, fill = TRUE)
org9 <- read.table('C:/Users/au583430/OneDrive - Aarhus universitet/Documents/MAG/N2 applied experiments/data/NH3/data/NH3_22K_9.txt', header = TRUE, fill = TRUE)
org10 <- read.table('C:/Users/au583430/OneDrive - Aarhus universitet/Documents/MAG/N2 applied experiments/data/NH3/data/NH3_22K_10.txt', header = TRUE, fill = TRUE)
# datafiles has been 'reversed'
data <- rbind(org1, org2, org3, org4, org5, org6, org7, org8, org9, org10)
data$date.time <- paste(data$DATE, data$TIME)
data$date.time<-ymd_hms(data$date.time)
data$date.time <- data$date.time
dat <- data
dat <- dat[-c(0:3474), ]
########################################################################################
#### ORDERING AND CROPING DATA #########################################################
########################################################################################
dat$id <- dat$MPVPosition
# taking the last point of each measurent from each valve
dat <- filter(dat, !(dat$id == lead(dat$id)))
# Selecting points with whole numbers (when the valve change there is a measurement where the valve position
# is in between two valves, these are removed)
dat <- dat[dat$id == '1' | dat$id == '2' | dat$id == '3' | dat$id == '4' | dat$id == '5' | dat$id == '6' | dat$id == '7' |
dat$id == '8' | dat$id == '9' | dat$id == '10' | dat$id == '11' | dat$id == '12' | dat$id == '13', ]
# Making elapsed.time fit with the first measurement of each valve = 0
dat$Vid <- 0
dat$Vid[1:13] <- c('V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10', 'V11', 'V12', 'V13')
splitdat <- split(dat, f = dat$id)
new.names <- dat$Vid[1:13]
for (i in 1:13){
assign(new.names[i], splitdat[[i]])
}
z = list(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13)
new.dat = NULL
for(i in z){
i$elapsed.time <- difftime(i$date.time, min(i$date.time), units='hour')
new.dat <- rbind(new.dat,i)
}
# cropping data:
dat <- new.dat[,c(19, 26:27, 29)]
dat$elapsed.time <- signif(dat$elapsed.time, digits = 3)
# adding a column with treatment names
dat$treat <- dat$id
dat$treat <- mapvalues(dat$treat, from = c('2', '6', '9'), to = c(rep('Reference', 3)))
dat$treat <- mapvalues(dat$treat, from = c('4', '8', '12'), to = c(rep('Separated', 3)))
dat$treat <- mapvalues(dat$treat, from = c('1', '5', '10'), to = c(rep('Plasma', 3)))
dat$replicate <- dat$id
dat$replicate <- mapvalues(dat$replicate, from = c('1', '2', '4'), to = c(rep('1', 3)))
dat$replicate <- mapvalues(dat$replicate, from = c('6', '5', '8'), to = c(rep('2', 3)))
dat$replicate <- mapvalues(dat$replicate, from = c('9', '10', '12'), to = c(rep('3', 3)))
dat$treat <- mapvalues(dat$treat, from = c('3'), to = c('bg tunnel 2'));
dat$treat <- mapvalues(dat$treat, from = c('7'), to = c('bg tunnel 5'))
dat$treat <- mapvalues(dat$treat, from = c('11'), to = c('bg tunnel 8'));
# # Fixing a time-bug:
dat$elapsed.time[dat$elapsed.time == '3.46'] <- 3.47; dat$elapsed.time[dat$elapsed.time == '46.8'] <- 46.7;
dat <- dat[! dat$elapsed.time == 2.13, ]; dat <- dat[! dat$elapsed.time == 52.30, ]; dat <- dat[! dat$elapsed.time == 118, ];
# background data:
dat.bg <- dat[dat$treat == 'bg tunnel 2' | dat$treat == 'bg tunnel 5'| dat$treat == 'bg tunnel 8', ]
# outlet data
dat <- dat[dat$treat == 'Reference' | dat$treat == 'Separated'| dat$treat == 'Plasma', ]
########################################################################################
#### TREATMENT OF BACKGROUNDS ##########################################################
########################################################################################
# plotting all background datapoints (NH3 [ppb] vs time [h])
ggplot(dat.bg, aes(elapsed.time, NH3_30s, colour = treat)) + geom_point()
# As the backgrounds are very similar an average of the background tube for tunnel 2, 5 and 8 is used as the back
# ground value.
# Picking out the data
dat.bg <- dat.bg[dat.bg$treat == 'bg tunnel 2' | dat.bg$treat == 'bg tunnel 5'| dat.bg$treat == 'bg tunnel 8', ]
# calculating the average and sd
dat.bg.summ <- ddply(dat.bg, c('elapsed.time'), summarise, NH3.bg.mn = mean(NH3_30s), NH3.bg.sd = sd(NH3_30s))
# joining the datasets:
dat <- full_join(dat.bg.summ, dat, by = 'elapsed.time')
# Subtracting the background values from the 30 second average values
dat$NH3.corr <- dat$NH3_30s - dat$NH3.bg.mn
dat[!complete.cases(dat),]
########################################################################################
#### FLUX CALCULATIONS #################################################################
# ########################################################################################
# reading in temperature data
header <- c('date', 'time', 'temp')
weather <- read.table('C:/Users/au583430/OneDrive - Aarhus universitet/Documents/MAG/N2 applied experiments/data/temperature.txt', fill = TRUE, col.names = header)
weather <- weather[-1, ]
weather$date.time.weather <- paste(weather$date, weather$time)
# round date.time in data to fit with weather
dat$date.time.weather <- round_date(dat$date.time, '1 hour')
dat$date.time.weather <- as.character(format(dat$date.time.weather, format='%d-%m-%Y %H:%M:%S'))
dat <- left_join(dat, weather, by = 'date.time.weather')
# constants:
p.con <- 1 # atm
R.con <- 0.082057338 # [L * atm * K^-1 * mol^-1]
A.frame <- 0.293 * 0.674 #m^2
M.N <- 14 # g * mol^-1
air.flow <- 20.16 * 60 # L min^-1
dat$temp <- as.numeric(dat$temp)
dat$air.temp.K <- dat$temp + 273.15
weather.22K <- dat[, c(1, 12)]
weather.22K$experiment <- '22K'
write.csv(weather.22K, '../data/w22K.csv')
# calculation of a concentration from ppb to mol * L^-1
dat$n <- p.con / (R.con * dat$air.temp.K) * dat$NH3.corr * 10^-9  # mol * L^-1
# calculation of flux, from mol * L^-1 to gN * min^-1 * m^-2
dat$flux <- (dat$n * M.N * air.flow) / A.frame
# rearanging data by tunnel
dat <- arrange(dat, by = id)
# calculation of total flux over time
# Average ammonia flux in measurement interval
dat$flux.tr <- rollapplyr(dat$flux, 2, mean, fill = NA)
dat$flux.tr[dat$elapsed.time == 0] <- 0
ggplot(dat, aes(elapsed.time, flux.tr, color = treat)) + geom_point()
############# MAKING DATA FRAME FOR ALFAM2 TEMPLATE
dat$project <- 'MAG'             # CHANGE CHANGE CHANGE
dat$exp <- '22K'                # CHANGE CHANGE CHANGE
dat$field <- 'A'       # CHANGE CHANGE CHANGE
dat$plot.number <- dat$id
dat$treatment <- dat$treat
dat$replicate.nu <- dat$replicate
# rearanging data by tunnel
dat <- arrange(dat, by = id)
dat$id <- as.character(dat$id)
dat <- mutate(group_by(dat, id), numbering = row_number())
dat$start.date <- format(dat$date.time, format="%d-%m-%Y %H:%M")
dat$end.date <- dat$start.date
dat$end.date <- c(dat$end.date[-1], dat$end.date[nrow(dat)]) # obs, the last row of each shift must be corrected manually after
dat$start.date <- as.POSIXct(dat$start.date, format="%d-%m-%Y %H:%M")
dat$end.date <- as.POSIXct(dat$end.date, format="%d-%m-%Y %H:%M")
dat$shift.length <- as.numeric((as.POSIXct(dat$end.date) - as.POSIXct(dat$start.date) )) / (60 * 60)
dat$shift.length <- as.numeric(dat$shift.length)
dat$shift.length <- dat$shift.length
dat <- ddply(dat, c('id'), filter, row_number() <= n()-1)
dat$measuring.tech <- 'Wind tunnel'
dat$details <- ''
dat$detection.limit <- ''
dat$bg.value <- dat$NH3.bg.mn / 1000
dat$bg.unit <- 'ppm'
# from gN * min^-1 * m^-2 to gN * h^-1 * ha^-1
dat$NH3.value <- dat$flux *10^-3 * 60 * 10^4
dat$NH3.unit <- 'kg N/ha-hr'
dat$man.pH <- ''
dat$air.temp <- dat$temp
dat$air.height <- '2'
#### CHANGE THESE ##########################################
dat.table <- dat[, c(18:37)]
write.xlsx(dat.table, file = '../ALFAM2 submission/dat22K.xlsx')
rm(list = ls())
dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source('packages.R')
source('functions/aggregate2.R')
source('functions/ggsave2x.R')
source('NH3_23A.R')
source('NH3_23B.R')
source('NH3_23E.R')
source('NH3_23F.R')
source('NH3_23G.R')
source('NH3_23C.R')
source('NH3_23D.R')
source('NH3_23H.R')
source('NH3_23I.R')
source('slurry.R')
source('slurry.R')
source('NH3_com.R')
####################################################
rm(list = ls())
source('packages.R')
source('functions.R')
setwd("C:/Users/au583430/OneDrive - Aarhus universitet/Documents/GitHub/Pedersen-2023-sep-and-plasma-treat/scripts-NH3")
rm(list = ls())
source('packages.R')
source('functions.R')
source('load.R')
source('combine.R')
source('calc.R')
source('export.R')
ggplot(dn3, aes(elapsed.time, flux.mn.perc, color = treat, fill = treat)) +
geom_point(size = 0.5) + geom_line(aes(group = treat)) +
facet_wrap( ~ exp, ncol = 2, scales = 'free_y') +
geom_ribbon(aes (ymax = flux.mn.perc + flux.sd.perc, ymin = flux.mn.perc - flux.sd.perc, group = treat), alpha = 0.3, color = NA) +
theme_bw() +
ylab(expression(paste('Flux (% applied TAN  ', h^-1, ' ', m^-2, ')'))) + xlab('Time from application (h)') +
theme(legend.title = element_blank()) +
theme(legend.position = 'bottom') +
xlim(0, 160) +
scale_color_brewer(palette = 'Set1') +
scale_fill_brewer(palette = 'Set1') +
xlim(0, 50)
ggsave2x('../plots/flux02', height = 4, width = 7)
