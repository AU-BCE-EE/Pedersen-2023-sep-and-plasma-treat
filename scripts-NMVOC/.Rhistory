dt <- dt[, !names(dt) %in% c('m21.cps', 'm37.cps', 'm18', 'm21', 'm29', 'm37', 'm39', 'm46', 'm48', 'm55', 'm63B')]
# removing fragments:
dt <- dt[, !names(dt) %in% c('m43A', 'm57', 'm71', 'm85')]
########################################################################################
#### DATAFRAME FOR SULFUR PLoTS ########################################################
########################################################################################
dt$elapsed.time <- difftime(dt$date.time, min(dt$date.time), units = 'mins')
ds <- dt[dt$elapsed.time <= 100, ]
ds <- subset(ds, select = c('date.time', 'elapsed.time', 'id', 'treat', 'm35', 'm49', 'm63A'))
ds <- gather(ds, mass, conc, m35:m63A)
# Making elapsed.time fit with the first measurement of each valve = 0
ds$Vid <- 0
ds$Vid[1:13] <- c('V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10', 'V11', 'V12', 'V13')
splitdat <- split(ds, f = ds$id)
new.names <- ds$Vid[1:13]
for (i in 1:13){
assign(new.names[i], splitdat[[i]])
}
z = list(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13)
new.dat = NULL
for(i in z){
i$elapsed.time <- difftime(i$date.time, min(i$date.time), units='mins')
new.dat <- rbind(new.dat,i)
}
ds <- new.dat
ds$elapsed.time <- signif(ds$elapsed.time, digits = 3)
ds$exp <- c('22I')
ds$slurry <- c('pig')
# ggplot(ds, aes(elapsed.time, conc, color = treat)) + geom_point() +
#   facet_wrap(~ mass, scales = 'free_y') + xlim(0, 8)
########################################################################################
#### ORDERING AND CROPING DATA CONT ####################################################
########################################################################################
# a measurement every 6 seconds, so we need 5 points for 30 second average
dt <- gather(dt, mass, conc, m33:m153)
dt$conc <- rollapplyr(dt$conc, 5, mean, fill = NA)
# removing NA's introduced by rollapply
dt <- na.omit(dt)
# taking the last point of each measurent from each valve
dt <- filter(dt, !(dt$id == lead(dt$id)))
# Making elapsed.time fit with the first measurement of each valve = 0
dt$Vid <- 0
dt$Vid[1:13] <- c('V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10', 'V11', 'V12', 'V13')
splitdat <- split(dt, f = dt$id)
new.names <- dt$Vid[1:13]
for (i in 1:13){
assign(new.names[i], splitdat[[i]])
}
z = list(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13)
new.dat = NULL
for(i in z){
i$elapsed.time <- difftime(i$date.time, min(i$date.time), units='hour')
new.dat <- rbind(new.dat,i)
}
dt <- new.dat
dt$elapsed.time <- signif(dt$elapsed.time, digits = 3)
# background data:
dt.bg <- dt[dt$treat == 'bg tunnel 2' | dt$treat == 'bg tunnel 5'| dt$treat == 'bg tunnel 8' | dt$treat == 'bg overall', ]
# outlet data
dt <- dt[dt$treat == 'Raw' | dt$treat == 'Separated'| dt$treat == 'NEO',]
# Removing bad times (found by looking at the plots in the bottom)
dt <- dt[! dt$elapsed.time == 71.0, ]
dt <- dt[! dt$elapsed.time == 72.8, ]
dt <- dt[! dt$elapsed.time == 19.1, ]
dt <- dt[! dt$elapsed.time == 20.8, ]
########################################################################################
#### TREATMENT OF BACKGROUNDS ##########################################################
########################################################################################
# ggplot(dt.bg, aes(elapsed.time, conc, color = id)) + geom_point() +
#   facet_wrap(~ mass, scales = 'free_y')
# As the backgrounds are very similar an average of the background tube for tunnel 2, 5 and 8 is used as the back
# ground value.
# Picking out the data
dt.bg <- dt.bg[dt.bg$treat == 'bg tunnel 2' | dt.bg$treat == 'bg tunnel 5'| dt.bg$treat == 'bg tunnel 8', ]
dt.bg$mearging.id <- paste(dt.bg$mass, dt.bg$elapsed.time)
dt.bg.summ <- ddply(dt.bg, c('mearging.id'), summarise, conc.bg.mn = mean(conc), conc.bg.sd = sd(conc))
dt$mearging.id <- paste(dt$mass, dt$elapsed.time)
# calculating the average and sd
dt <- left_join(dt, dt.bg.summ, by = 'mearging.id')
# subtracting the background values from the 30 second average values and making the negative values equal 0
dt$conc.corr <- dt$conc - dt$conc.bg.mn
dt[!complete.cases(dt),]
dt <- na.omit(dt)
########################################################################################
#### DIVIDING M/Z 41 INTO 2-PROPANOL AND 2-BUTANOL #####################################
########################################################################################
# The fraction from 2-butanol:
dt.ex <- dt[dt$mass == 'm41', ]
dt.ex$mass <- mapvalues(dt.ex$mass, from = 'm41', to = 'm41bu')
dt.ex$conc.corr <- dt.ex$conc.corr * 0.35
# The fraction from 2-propanol:
dt$mass <- mapvalues(dt$mass, from = 'm41', to = 'm41pro')
dt[dt$mass == 'm41pro', ]$conc.corr <- dt[dt$mass == 'm41pro', ]$conc.corr * 0.65
# Putting the correct amount for m43 (0.3 * amount of m41pro)
dt[dt$mass == 'm43B', ]$conc.corr <- dt[dt$mass == 'm41pro', ]$conc.corr * 0.3
# Binding together:
dt <- rbind(dt, dt.ex)
########################################################################################
#### FLUX CALCULATIONS #################################################################
########################################################################################
# correcting rate constant (2 was used for calculations in PTR-MS viewer)
dfi <- read.xlsx('../TOF/overview.xlsx', sheet = 3)
dt <- left_join(dt, dfi, by = 'mass')
dt[ , c('conc', 'conc.bg.mn', 'conc.corr', 'conc.bg.sd')] <- dt[ , c('conc', 'conc.bg.mn', 'conc.corr', 'conc.bg.sd')] / 2 * dt$K
# reading in temperature data
header <- c('date', 'time', 'temp')
weather <- read.table('../data/temperature.txt', fill = TRUE, col.names = header)
weather <- weather[-1, ]
weather$date.time.weather <- paste(weather$date, weather$time)
weather$temp.K <- as.numeric(weather$temp) + 273.15
# round date.time in data to fit with weather
dt$date.time.weather <- round_date(dt$date.time, '1 hour')
dt$date.time.weather <- as.character(format(dt$date.time.weather, format='%d-%m-%Y %H:%M:%S'))
dt <- left_join(dt, weather, by = 'date.time.weather')
# # constants:
p.con <- 1 # atm
R.con <- 0.082057338 # [L * atm * K^-1 * mol^-1]
A.frame <- 0.293 * 0.674 #m^2
air.flow <- 20.16 * 60 # L min^-1
# calculation of a concentration from ppb to mol * L^-1
dt$n <- p.con / (R.con * dt$temp.K) * dt$conc.corr * 10^-9  # mol * L^-1
# calculation of flux, from mol * L^-1 to mol * min^-1 * m^-2
dt$flux <- (dt$n * air.flow) / A.frame
# calculation of total flux over time
# Average flux in measurement interval
dt$flux <- rollapplyr(dt$flux, 2, mean, fill = NA)
dt$flux[dt$elapsed.time == 0] <- 0
dt$flux[dt$flux < 0 ] <- 0
# calculation of total flux over time, last point * 104 min (time from start to start 8 x 10 min)
dt$flux.time <- dt$flux * 104
# cum.emis. 104min is calculated for the boxplots
dt <- mutate(group_by(dt, id, mass), cum = cumsum(flux.time))
dt.summ <- summarise(group_by(dt, treat, mass, elapsed.time), cum.mn = mean(cum), cum.sd = sd(cum))
colnames(dt.summ) <- c('treat', 'mass', 'elapsed.time', 'cum.mn', 'cum.sd')
################################################################################################################
# creating the different dataframes needed
# Average cumulative emissions
dt.22I.A <- dt.summ[dt.summ$elapsed.time == '118', ]
dt.22I.A$exp <- c('22I')
dt.22I.A$elapsed.time <- as.character(dt.22I.A$elapsed.time)
# Cumulative emissions for each individual tunnel
dt.22I.B <- dt[dt$elapsed.time == '118', ]
dt.22I.B$exp <- c('22I')
dt.22I.B$elapsed.time <- as.character(dt.22I.B$elapsed.time)
# flux over time
dt.22I <- dt
dt.22I$exp <- c('22I')
dt.22I$elapsed.time <- as.character(dt.22I$elapsed.time)
# ggplot(dt, aes(elapsed.time, flux, colour = treat)) +
#   geom_point() +
#   facet_wrap(~ mass, ncol = 5, scales = 'free_y') +
#   theme_bw() +
#   ylab(expression(paste('(mol ', min^-1, m^-2,')'))) + xlab('Time from application (h)') +
#   theme(legend.title = element_blank()) +
#   theme(legend.position = 'bottom') +
#   theme(axis.title.x = element_blank())
# ggplot(dt, aes(elapsed.time, cum, colour = treat)) +
#   geom_point() +
#   facet_wrap(~ mass, ncol = 5, scales = 'free_y') +
#   theme_bw() +
#   ylab(expression(paste('(mol ', m^-2,')'))) + xlab('Time from application (h)') +
#   theme(legend.title = element_blank()) +
#   theme(legend.position = 'bottom') +
#   theme(axis.title.x = element_blank())
# ggplot(dt.22I.A, aes(treat, cum.mn, fill = treat)) +
#   geom_bar(stat = 'identity') +
#   facet_wrap(~ mass, ncol = 5, scales = 'free_y') +
#   theme_bw() +
#   ylab(expression(paste('Concentration (mol  ', m^-2,')'))) +
#   theme(legend.position="none") +
#   geom_errorbar(aes (ymax = cum.mn + cum.sd, ymin = cum.mn - cum.sd), width = 0.3, size = 0.5) +
#   theme(legend.title = element_blank()) +
#   theme(legend.position = 'none') +
#   theme(axis.title.x = element_blank())
# data frames for GitHub use
write.csv(dt.22I, '../data/pigA.VOC.A.csv')
####################################################
rm(list = ls())
setwd("C:/Users/au583430/OneDrive - Aarhus universitet/Documents/GitHub/Pedersen-2023-sep-and-plasma-treat/scripts-NMVOC")
####################################################
rm(list = ls())
source('packages.R')
source('functions.R')
# NMVOC emission data
digA.A <- read.csv('../data-NMVOC/digA.VOC.A.csv')
digB.A$exp <- 'Digestate B'
digB.A$exp <- 'Digestate A'
digA.A$exp <- 'Digestate A'
digB.A <- read.csv('../data-NMVOC/digB.VOC.A.csv')
digB.A$exp <- 'Digestate B'
# NMVOC emission data
digA.A <- read.csv('../data-NMVOC/digA.VOC.A.csv')
digA.A$exp <- 'Digestate A'
digB.A <- read.csv('../data-NMVOC/digB.VOC.A.csv')
digB.A$exp <- 'Digestate B'
pigA.A <- read.csv('../data-NMVOC/pigA.VOC.A.csv')
pigA.A$exp <- 'pig A'
pigB.A <- read.csv('../data-NMVOC/pigB.VOC.A.csv')
pigB.A$exp <- 'Pig B'
dv <- rbind(digA.A, digB.A, pigA.A, pigB.A)
View(dv)
####################################################
rm(list = ls())
dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source('packages.R')
source('VOC_22H.R')
####################################################
rm(list = ls())
dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source('packages.R')
dt1 <- read.csv('../data/NMVOC/22H_1.csv', sep = ';', header = TRUE)
dt2 <- read.csv('../data/NMVOC/22H_2.csv', sep = ';', header = TRUE)
dt3 <- read.csv('../data/NMVOC/22H_3.csv', sep = ';', header = TRUE)
dt4 <- read.csv('../data/NMVOC/22H_4.csv', sep = ';', header = TRUE)
dt5 <- read.csv('../data/NMVOC/22H_5.csv', sep = ';', header = TRUE)
dt6 <- read.csv('../data/NMVOC/22H_6.csv', sep = ';', header = TRUE)
dt7 <- read.csv('../data/NMVOC/22H_7.csv', sep = ';', header = TRUE)
dt8 <- read.csv('../data/NMVOC/22H_8.csv', sep = ';', header = TRUE)
dt <- rbind(dt1, dt2, dt3, dt4, dt5, dt6, dt7, dt8)
dt <- dt[ , c(1, 5, 9, 44:83)]
dt$date.time<- as.POSIXct(as.Date(dt$AbsTime, origin = as.Date('1900-01-01 00:00:00')))
# subtracting two days as the line above adds to days....
dt$date.time <- dt$date.time - 60 * 60 * 24 * 2
header <- c('AbsTime', 'm21.cps', 'm37.cps', 'm18', 'm21', 'm29', 'm33', 'm35', 'm37', 'm39', 'm41', 'm43A',
'm43B', 'm45', 'm46', 'm47', 'm48', 'm49', 'm55', 'm57', 'm59', 'm60', 'm61', 'm63A', 'm63B',
'm69', 'm71', 'm73', 'm75', 'm79', 'm83', 'm85', 'm87', 'm89', 'm95', 'm101', 'm103', 'm109',
'm115', 'm123', 'm132', 'm135', 'm153', 'date.time')
colnames(dt) <- header
# Adding fragment mass to mass:
dt$m61 <- dt$m61 + dt$m43A
dt$m75 <- dt$m75 + dt$m57
dt$m89 <- dt$m89 + dt$m71
dt$m103 <- dt$m103 + dt$m85
# Correction of hydrogen sulfur.
# See excel sheet 'data' in dt/H2S calibration curve dt.
# Result: H2S_std/H2S_obs = 2.8984 * cps37/cps21 - 18.284
dt$cps3721 <- dt$m37.cps / dt$m21.cps
dt$corr.factor <- dt$cps3721 * 2.8984 - 18.284
dt$m35 <- dt$m35 * dt$corr.factor
dn1 <- read.table('../data/NH3/data/NH3_22H_1.txt', header = TRUE, fill = TRUE)
dn2 <- read.table('../data/NH3/data/NH3_22H_2.txt', header = TRUE, fill = TRUE)
dn3 <- read.table('../data/NH3/data/NH3_22H_3.txt', header = TRUE, fill = TRUE)
dn4 <- read.table('../data/NH3/data/NH3_22H_4.txt', header = TRUE, fill = TRUE)
dn5 <- read.table('../data/NH3/data/NH3_22H_5.txt', header = TRUE, fill = TRUE)
dn6 <- read.table('../data/NH3/data/NH3_22H_6.txt', header = TRUE, fill = TRUE)
dn7 <- read.table('../data/NH3/data/NH3_22H_7.txt', header = TRUE, fill = TRUE)
dn8 <- read.table('../data/NH3/data/NH3_22H_8.txt', header = TRUE, fill = TRUE)
dn <- rbind(dn1, dn2, dn3, dn4, dn5, dn6, dn7, dn8)
dn$date.time <- paste(dn$DATE, dn$TIME)
dn$date.time<-ymd_hms(dn$date.time)
dn$date.time <- dn$date.time
dn <- dn[-c(0:15), ]
# getting time and valve no from NH3 data
dn <- dn[, c(15, 26)]
# rounding times so it match in the two data frames
dt$date.time <- ceiling_date(dt$date.time, 'seconds')
dn$date.time <- ceiling_date(dn$date.time, 'seconds')
# slight ofset in data between PTR-MS and Picarro due to tubing into PTR-MS is longer. Adding time to make them fit
dt$date.time <- dt$date.time + 60 * 2
# adding the valve no to dt data
dt <- left_join(dt, dn, by = 'date.time')
dt <- dt[! is.na(dt$MPVPosition), ]
dt$elapsed.time <- difftime(dt$date.time, min(dt$date.time), units='hour')
dt$id <- as.character(dt$MPVPosition)
# Selecting points with whole numbers (when the valve change there is a measurement where the valve position
# is in between two valves, these are removed)
dt <- dt[dt$id == '1' | dt$id == '2' | dt$id == '3' | dt$id == '4' | dt$id == '5' | dt$id == '6' | dt$id == '7' |
dt$id == '8' | dt$id == '9' | dt$id == '10' | dt$id == '11' | dt$id == '12' | dt$id == '13', ]
# Checking data
# ggplot(dt, aes(elapsed.time, m45, color = id)) + geom_point() +
#   xlim(80, 82) #+
#   # ylim(0, 1)
########################################################################################
#### ORDERING AND CROPING DATA #########################################################
########################################################################################
# adding a column with treatment names
dt$treat <- dt$id
dt$treat <- mapvalues(dt$treat, from = c('1', '6', '9'), to = c(rep('Raw', 3)))
dt$treat <- mapvalues(dt$treat, from = c('2', '5', '10'), to = c(rep('Separated', 3)))
dt$treat <- mapvalues(dt$treat, from = c('4', '8', '12'), to = c(rep('NEO', 3)))
dt$treat <- mapvalues(dt$treat, from = c('3'), to = c('bg tunnel 2'));
dt$treat <- mapvalues(dt$treat, from = c('7'), to = c('bg tunnel 5'))
dt$treat <- mapvalues(dt$treat, from = c('11'), to = c('bg tunnel 8'));
# removing unrelevant data
dt <- dt[, !names(dt) %in% c('m21.cps', 'm37.cps', 'm18', 'm21', 'm29', 'm37', 'm39', 'm46', 'm48', 'm55', 'm63B')]
# removing fragments:
dt <- dt[, !names(dt) %in% c('m43A', 'm57', 'm71', 'm85')]
########################################################################################
#### DATAFRAME FOR SULFUR PLoTS ########################################################
########################################################################################
dt$elapsed.time <- difftime(dt$date.time, min(dt$date.time), units = 'mins')
ds <- dt[dt$elapsed.time <= 100, ]
ds <- subset(ds, select = c('date.time', 'elapsed.time', 'id', 'treat', 'm35', 'm49', 'm63A'))
ds <- gather(ds, mass, conc, m35:m63A)
# Making elapsed.time fit with the first measurement of each valve = 0
ds$Vid <- 0
ds$Vid[1:13] <- c('V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10', 'V11', 'V12', 'V13')
splitdat <- split(ds, f = ds$id)
new.names <- ds$Vid[1:13]
for (i in 1:13){
assign(new.names[i], splitdat[[i]])
}
z = list(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13)
new.dat = NULL
for(i in z){
i$elapsed.time <- difftime(i$date.time, min(i$date.time), units='mins')
new.dat <- rbind(new.dat,i)
}
ds <- new.dat
ds$elapsed.time <- signif(ds$elapsed.time, digits = 3)
ds$exp <- c('22H')
ds$slurry <- c('digestate')
# ggplot(ds, aes(elapsed.time, conc, color = id)) + geom_point() +
#   facet_wrap(~ mass, scales = 'free_y') + xlim(0, 8)
########################################################################################
#### ORDERING AND CROPING DATA CONT ####################################################
########################################################################################
# a measurement every 6 seconds, so we need 5 points for 30 second average
dt <- gather(dt, mass, conc, m33:m153)
dt$conc <- rollapplyr(dt$conc, 5, mean, fill = NA)
# removing NA's introduced by rollapply
dt <- na.omit(dt)
# taking the last point of each measurent from each valve
dt <- filter(dt, !(dt$id == lead(dt$id)))
# Making elapsed.time fit with the first measurement of each valve = 0
dt$Vid <- 0
dt$Vid[1:13] <- c('V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10', 'V11', 'V12', 'V13')
splitdat <- split(dt, f = dt$id)
new.names <- dt$Vid[1:13]
for (i in 1:13){
assign(new.names[i], splitdat[[i]])
}
z = list(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13)
new.dat = NULL
for(i in z){
i$elapsed.time <- difftime(i$date.time, min(i$date.time), units='hour')
new.dat <- rbind(new.dat,i)
}
dt <- new.dat
dt$elapsed.time <- signif(dt$elapsed.time, digits = 3)
# background data:
dt.bg <- dt[dt$treat == 'bg tunnel 2' | dt$treat == 'bg tunnel 5'| dt$treat == 'bg tunnel 8' | dt$treat == 'bg overall', ]
# outlet data
dt <- dt[dt$treat == 'Raw' | dt$treat == 'Separated'| dt$treat == 'NEO',]
# Removing bad times (found by looking at the plots in the bottom)
dt <- dt[! dt$elapsed.time == 62.8, ]
dt <- dt[! dt$elapsed.time == 71.0, ]
dt <- dt[! dt$elapsed.time == 72.8, ]
dt <- dt[! dt$elapsed.time == 95.3, ]
dt <- dt[! dt$elapsed.time == 97.0, ]
########################################################################################
#### TREATMENT OF BACKGROUNDS ##########################################################
########################################################################################
# ggplot(dt.bg, aes(elapsed.time, conc, color = id)) + geom_point() +
#   facet_wrap(~ mass, scales = 'free_y')
# As the backgrounds are very similar an average of the background tube for tunnel 2, 5 and 8 is used as the back
# ground value.
# Picking out the data
dt.bg <- dt.bg[dt.bg$treat == 'bg tunnel 2' | dt.bg$treat == 'bg tunnel 5'| dt.bg$treat == 'bg tunnel 8', ]
dt.bg$mearging.id <- paste(dt.bg$mass, dt.bg$elapsed.time)
dt.bg.summ <- ddply(dt.bg, c('mearging.id'), summarise, conc.bg.mn = mean(conc), conc.bg.sd = sd(conc))
dt$mearging.id <- paste(dt$mass, dt$elapsed.time)
# calculating the average and sd
dt <- left_join(dt, dt.bg.summ, by = 'mearging.id')
# subtracting the background values from the 30 second average values and making the negative values equal 0
dt$conc.corr <- dt$conc - dt$conc.bg.mn
########################################################################################
#### DIVIDING M/Z 41 INTO 2-PROPANOL AND 2-BUTANOL #####################################
########################################################################################
# The fraction from 2-butanol:
dt.ex <- dt[dt$mass == 'm41', ]
dt.ex$mass <- mapvalues(dt.ex$mass, from = 'm41', to = 'm41bu')
dt.ex$conc.corr <- dt.ex$conc.corr * 0.35
# The fraction from 2-propanol:
dt$mass <- mapvalues(dt$mass, from = 'm41', to = 'm41pro')
dt[dt$mass == 'm41pro', ]$conc.corr <- dt[dt$mass == 'm41pro', ]$conc.corr * 0.65
# Putting the correct amount for m43 (0.3 * amount of m41pro)
dt[dt$mass == 'm43B', ]$conc.corr <- dt[dt$mass == 'm41pro', ]$conc.corr * 0.3
# Binding together:
dt <- rbind(dt, dt.ex)
########################################################################################
#### FLUX CALCULATIONS #################################################################
########################################################################################
# correcting rate constant (2 was used for calculations in PTR-MS viewer)
dfi <- read.xlsx('../TOF/overview.xlsx', sheet = 3)
dt <- left_join(dt, dfi, by = 'mass')
dt[ , c('conc', 'conc.bg.mn', 'conc.corr', 'conc.bg.sd')] <- dt[ , c('conc', 'conc.bg.mn', 'conc.corr', 'conc.bg.sd')] / 2 * dt$K
# reading in temperature data
header <- c('date', 'time', 'temp')
weather <- read.table('../data/temperature.txt', fill = TRUE, col.names = header)
weather <- weather[-1, ]
weather$date.time.weather <- paste(weather$date, weather$time)
weather$temp.K <- as.numeric(weather$temp) + 273.15
# round date.time in data to fit with weather
dt$date.time.weather <- round_date(dt$date.time, '1 hour')
dt$date.time.weather <- as.character(format(dt$date.time.weather, format='%d-%m-%Y %H:%M:%S'))
dt <- left_join(dt, weather, by = 'date.time.weather')
# # constants:
p.con <- 1 # atm
R.con <- 0.082057338 # [L * atm * K^-1 * mol^-1]
A.frame <- 0.293 * 0.674 #m^2
air.flow <- 20.16 * 60 # L min^-1
# calculation of a concentration from ppb to mol * L^-1
dt$n <- p.con / (R.con * dt$temp.K) * dt$conc.corr * 10^-9  # mol * L^-1
# calculation of flux, from mol * L^-1 to mol * min^-1 * m^-2
dt$flux <- (dt$n * air.flow) / A.frame
# calculation of total flux over time
# Average flux in measurement interval
dt$flux <- rollapplyr(dt$flux, 2, mean, fill = NA)
dt$flux[dt$elapsed.time == 0] <- 0
dt$flux[dt$flux < 0 ] <- 0
# calculation of total flux over time, last point * 104 min (time from start to start 8 x 10 min)
dt$flux.time <- dt$flux * 104
# cum.emis. 104min is calculated for the boxplots
dt <- mutate(group_by(dt, id, mass), cum = cumsum(flux.time))
dt.summ <- summarise(group_by(dt, treat, mass, elapsed.time), cum.mn = mean(cum), cum.sd = sd(cum))
colnames(dt.summ) <- c('treat', 'mass', 'elapsed.time', 'cum.mn', 'cum.sd')
################################################################################################################
# creating the different dataframes needed
# Average cumulative emissions
dt.22H.A <- dt.summ[dt.summ$elapsed.time == '161', ]
dt.22H.A$exp <- c('22H')
dt.22H.A$elapsed.time <- as.character(dt.22H.A$elapsed.time)
# Cumulative emissions for each individual tunnel
dt.22H.B <- dt[dt$elapsed.time == '161', ]
dt.22H.B$exp <- c('22H')
dt.22H.B$elapsed.time <- as.character(dt.22H.B$elapsed.time)
# flux over time
dt.22H <- dt
dt.22H$exp <- c('22H')
dt.22H$elapsed.time <- as.character(dt.22H$elapsed.time)
# ggplot(dt, aes(elapsed.time, flux, colour = treat)) +
#   geom_point() +
#   facet_wrap(~ mass, ncol = 5, scales = 'free_y') +
#   theme_bw() +
#   ylab(expression(paste('(mol ', min^-1, m^-2,')'))) + xlab('Time from application (h)') +
#   theme(legend.title = element_blank()) +
#   theme(legend.position = 'bottom') +
#   theme(axis.title.x = element_blank())
# ggplot(dt, aes(elapsed.time, cum, colour = id)) +
#   geom_point() +
#   facet_wrap(~ mass, ncol = 5, scales = 'free_y') +
#   theme_bw() +
#   ylab(expression(paste('(mol ', m^-2,')'))) + xlab('Time from application (h)') +
#   theme(legend.title = element_blank()) +
#   theme(legend.position = 'bottom') +
#   theme(axis.title.x = element_blank())
#
# ggplot(dt.22H.A, aes(treat, cum.mn, fill = treat)) +
#   geom_bar(stat = 'identity') +
#   facet_wrap(~ mass, ncol = 5, scales = 'free_y') +
#   theme_bw() +
#   ylab(expression(paste('Concentration (mol  ', m^-2,')'))) +
#   theme(legend.position="none") +
#   geom_errorbar(aes (ymax = cum.mn + cum.sd, ymin = cum.mn - cum.sd), width = 0.3, size = 0.5) +
#   theme(legend.title = element_blank()) +
#   theme(legend.position = 'none') +
#   theme(axis.title.x = element_blank())
# data frames for GitHub use
write.csv(dt.22H, '../data/digA.VOC.A.csv')
source('VOC_22I.R')
source('VOC_22J.R')
source('VOC_22K.R')
rm(list = ls())
source('packages.R')
source('functions.R')
setwd("C:/Users/au583430/OneDrive - Aarhus universitet/Documents/GitHub/Pedersen-2023-sep-and-plasma-treat/scripts-NMVOC")
####################################################
rm(list = ls())
source('packages.R')
source('functions.R')
source('load.R')
# calculating mass flux (g min-1 m-2) from (mol min-1 m-2)
dv$flux.m <- dv$flux * dv$nn
dv <- mutate(group_by(dv, exp, id, mass), cum = cumsum(flux.mt))
# calculating cumulative loss of the different compounds
# time resolution = 104 min
dv$flux.mt <- dv$flux.m * 104
dv <- mutate(group_by(dv, exp, id, mass), cum = cumsum(flux.mt))
dv.summ <- summarise(group_by(dv, exp, treat, mass, elapsed.time), cum.mn = mean(cum), cum.sd = sd(cum))
colnames(dv.summ) <- c('exp', treat', 'mass', 'elapsed.time', 'cum.mn', 'cum.sd')
colnames(dv.summ) <- c('exp', 'treat', 'mass', 'elapsed.time', 'cum.mn', 'cum.sd')
View(dv.summ)
View(dv)
View(dv.summ)
dv.dA <- dv[dv$exp == 'Digestate A' & dv$elapsed.time == 161, ]
View(dv.dA)
dv.dA <- dv.summ[dv.summ$exp == 'Digestate A' & dv.summ$elapsed.time == 161, ]
View(dv.dA)
dv.dB <- dv.summ[dv.summ$exp == 'Digestate B' & dv.summ$elapsed.time == 88.3, ]
dv.dB <- dv.summ[dv.summ$exp == 'Digestate B' & dv.summ$elapsed.time == 88.3, ]
View(dv.summ)
dv.dB <- dv.summ[dv.summ$exp == 'Digestate B' & dv.summ$elapsed.time == 132, ]
dv.pA <- dv.summ[dv.summ$exp == 'Pig A' & dv.summ$elapsed.time == 118, ]
####################################################
rm(list = ls())
source('packages.R')
source('functions.R')
source('load.R')
source('calc.R')
dv.dA <- dv.summ[dv.summ$exp == 'Digestate A' & dv.summ$elapsed.time == 161, ]
dv.dB <- dv.summ[dv.summ$exp == 'Digestate B' & dv.summ$elapsed.time == 132, ]
dv.pA <- dv.summ[dv.summ$exp == 'Pig A' & dv.summ$elapsed.time == 118, ]
dv.pB <- dv.summ[v.summ$exp == 'Pig B' & dv.summ$elapsed.time == 88.3, ]
dv.pB <- dv.summ[dv.summ$exp == 'Pig B' & dv.summ$elapsed.time == 88.3, ]
write.csv(dv.dA, '../output/dv.dA.csv')
write.csv(dv.dB, '../output/dv.dB.csv')
write.csv(dv.pA, '../output/dv.pA.csv')
write.csv(dv.pB, '../output/dv.pB.csv')
dv$oav <- dv$conc.corr / dv$OTV
